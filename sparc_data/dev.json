{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 0,
    "final": {
        "utterance": "List document IDs, document names, and document descriptions for all documents.",
        "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    "interaction": [
        {
            "utterance": "Show information for all documents .",
            "sql": "select * from documents"
        },
        {
            "utterance": "Show their ids .",
            "sql": "select document_id from documents"
        },
        {
            "utterance": "Also show their document names and document descriptions .",
            "sql": "select document_id , document_name , document_description from documents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the document name and template id for document with description with the letter 'w' in it?",
        "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    "interaction": [
        {
            "utterance": "Show the document name for all documents .",
            "sql": "select document_name from documents"
        },
        {
            "utterance": "Also show their description .",
            "sql": "select document_name , document_description from documents"
        },
        {
            "utterance": "Which one has description with the letter 'w ' in it ?",
            "sql": "select document_name from documents where document_description like value"
        },
        {
            "utterance": "Show its name and template id .",
            "sql": "select document_name , template_id from documents where document_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    "interaction": [
        {
            "utterance": "Show the the document name for all documents .",
            "sql": "select document_name from documents"
        },
        {
            "utterance": "Show the document id for the one named `` Robbin CV '' ?",
            "sql": "select document_id from documents where document_name = value"
        },
        {
            "utterance": "Also show its template id and description .",
            "sql": "select document_id , template_id , document_description from documents where document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 3,
    "final": {
        "utterance": "How many different templates do all document use?",
        "sql": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    "interaction": [
        {
            "utterance": "Show the template id for all documents .",
            "sql": "select template_id from documents"
        },
        {
            "utterance": "Show all distinct results .",
            "sql": "select distinct template_id from documents"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct template_id ) from documents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 4,
    "final": {
        "utterance": "How many documents are using the template with type code 'PPT'?",
        "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    "interaction": [
        {
            "utterance": "Show the document ids .",
            "sql": "select document_id from documents"
        },
        {
            "utterance": "Also show their template id and template type code .",
            "sql": "select t1 . document_id , t2 . template_id , t2 . template_type_code from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "Which documents are using the template with type code 'PPT ' ?",
            "sql": "select t1 . document_id from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id where t2 . template_type_code = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id where t2 . template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all template ids and number of documents using each template.",
        "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    "interaction": [
        {
            "utterance": "Show the template id for all documents .",
            "sql": "select template_id from documents"
        },
        {
            "utterance": "For each of them , show the number of documents using it .",
            "sql": "select template_id , count ( * ) from documents group by template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the id and type code for the template used by the most documents?",
        "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the template id for all Documents .",
            "sql": "select template_id from documents"
        },
        {
            "utterance": "Also show its template type code .",
            "sql": "select t1 . template_id , t2 . template_type_code from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "For each of them , show the number of documents using it .",
            "sql": "select count ( * ) , t1 . template_id , t2 . template_type_code from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id group by t1 . template_id"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select t1 . template_id , t2 . template_type_code from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id group by t1 . template_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 7,
    "final": {
        "utterance": "Show ids for all templates that are used by more than one document.",
        "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show the template id for all documents .",
            "sql": "select template_id from documents"
        },
        {
            "utterance": "For each of them , show the number of documents .",
            "sql": "select template_id , count ( * ) from documents group by template_id"
        },
        {
            "utterance": "Which of them are used by more than one document ?",
            "sql": "select template_id from documents group by template_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 8,
    "final": {
        "utterance": "Show ids for all templates not used by any document.",
        "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    "interaction": [
        {
            "utterance": "Show template ids used by some document .",
            "sql": "select template_id from documents"
        },
        {
            "utterance": "Show all template ids .",
            "sql": "select template_id from templates"
        },
        {
            "utterance": "Which of them are not used by any document ?",
            "sql": "select template_id from templates except select template_id from documents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 9,
    "final": {
        "utterance": "How many templates do we have?",
        "sql": "SELECT count(*) FROM Templates"
    },
    "interaction": [
        {
            "utterance": "Show info for all templates .",
            "sql": "select * from templates"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from templates"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 10,
    "final": {
        "utterance": "Show template ids, version numbers, and template type codes for all templates.",
        "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    "interaction": [
        {
            "utterance": "Show template ids for all templates .",
            "sql": "select template_id from templates"
        },
        {
            "utterance": "Also show their version numbers and template type codes .",
            "sql": "select template_id , version_number , template_type_code from templates"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all distinct template type codes for all templates.",
        "sql": "SELECT DISTINCT template_type_code FROM Templates"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes for all templates .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "Filter out duplicates .",
            "sql": "select distinct template_type_code from templates"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the ids of templates with template type code PP or PPT?",
        "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    "interaction": [
        {
            "utterance": "Show the template ids for all templates .",
            "sql": "select template_id from templates"
        },
        {
            "utterance": "How about the ids with template type code PP or PPT ?",
            "sql": "select template_id from templates where template_type_code = value or template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 13,
    "final": {
        "utterance": "How many templates have template type code CV?",
        "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    "interaction": [
        {
            "utterance": "Show the template type codes for all templates .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "How many of them have template type code CV ?",
            "sql": "select count ( * ) from templates where template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the version number and template type code for the template with version number later than 5?",
        "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    "interaction": [
        {
            "utterance": "What is the version number for all template ?",
            "sql": "select version_number from templates"
        },
        {
            "utterance": "Only show those with version number later than 5 .",
            "sql": "select version_number from templates where version_number > value"
        },
        {
            "utterance": "Also show their template type code .",
            "sql": "select version_number , template_type_code from templates where version_number > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all template type codes and number of templates for each.",
        "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    "interaction": [
        {
            "utterance": "Show the template type code for all templates .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "For each of them , count the number of templates",
            "sql": "select template_type_code , count ( * ) from templates group by template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 16,
    "final": {
        "utterance": "Which template type code has most number of templates?",
        "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all type codes for templates .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "For each of them , how many templates do they contain ?",
            "sql": "select template_type_code , count ( * ) from templates group by template_type_code"
        },
        {
            "utterance": "Which of them contains the most templates ?",
            "sql": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 17,
    "final": {
        "utterance": "Show all template type codes with less than three templates.",
        "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "For each of them , show the count of templates .",
            "sql": "select template_type_code , count ( * ) from templates group by template_type_code"
        },
        {
            "utterance": "Which of them have fewer than three templates ?",
            "sql": "select template_type_code from templates group by template_type_code having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 18,
    "final": {
        "utterance": "What the smallest version number and its template type code?",
        "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    "interaction": [
        {
            "utterance": "Show the version number for all templates .",
            "sql": "select version_number from templates"
        },
        {
            "utterance": "What is the smallest value ?",
            "sql": "select min ( version_number ) from templates"
        },
        {
            "utterance": "Also show its template type code .",
            "sql": "select min ( version_number ) , template_type_code from templates"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the template type code of the template used by document with the name \"Data base\"?",
        "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    "interaction": [
        {
            "utterance": "What is the template type code of the template .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "Also show the names of all documents using each template .",
            "sql": "select t1 . template_type_code , t2 . document_name from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "Which of the template type codes is used by document with the name `` Data base '' ?",
            "sql": "select t1 . template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id where t2 . document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 20,
    "final": {
        "utterance": "Show all document names using templates with template type code BK.",
        "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    "interaction": [
        {
            "utterance": "Show all document names .",
            "sql": "select document_name from documents"
        },
        {
            "utterance": "Also show their template type codes .",
            "sql": "select t2 . document_name , t1 . template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "Which of the documents are using templates with template type code BK ?",
            "sql": "select t2 . document_name from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id where t1 . template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 21,
    "final": {
        "utterance": "Show all template type codes and the number of documents using each type.",
        "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "Also show the document ids using each template .",
            "sql": "select t1 . template_type_code , t2 . document_id from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "For each type code , how many documents are using that template ?",
            "sql": "select t1 . template_type_code , count ( * ) from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id group by t1 . template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 22,
    "final": {
        "utterance": "Which template type code is used by most number of documents?",
        "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the type codes for all templates .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "For each , how many documents are using this template ?",
            "sql": "select t1 . template_type_code , count ( * ) from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id group by t1 . template_type_code"
        },
        {
            "utterance": "Order the template type codes in descending order by this number .",
            "sql": "select t1 . template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id group by t1 . template_type_code order by count ( * ) desc"
        },
        {
            "utterance": "Which of them has the most ?",
            "sql": "select t1 . template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id group by t1 . template_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 23,
    "final": {
        "utterance": "Show all template type codes that are not used by any document.",
        "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes .",
            "sql": "select template_type_code from templates"
        },
        {
            "utterance": "Show all template type codes that are used by some document .",
            "sql": "select template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "How about those that are not used by any document ?",
            "sql": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 24,
    "final": {
        "utterance": "Show all template type codes and descriptions.",
        "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes .",
            "sql": "select template_type_code from ref_template_types"
        },
        {
            "utterance": "Also show their descriptions .",
            "sql": "select template_type_code , template_type_description from ref_template_types"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the template type descriptions for template type code \"AD\".",
        "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    "interaction": [
        {
            "utterance": "Show all template type codes and descriptions .",
            "sql": "select template_type_code , template_type_description from ref_template_types"
        },
        {
            "utterance": "What is the description for template type code `` AD '' ?",
            "sql": "select template_type_description from ref_template_types where template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the template type code for template type description \"Book\".",
        "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    "interaction": [
        {
            "utterance": "Show all template type codes .",
            "sql": "select template_type_code from ref_template_types"
        },
        {
            "utterance": "Also show descriptions .",
            "sql": "select template_type_code , template_type_description from ref_template_types"
        },
        {
            "utterance": "Which code has template type description `` Book '' ?",
            "sql": "select template_type_code from ref_template_types where template_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the distinct template type descriptions for the templates ever used by any document?",
        "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    "interaction": [
        {
            "utterance": "Show the template ids used by any document .",
            "sql": "select template_id from documents"
        },
        {
            "utterance": "Also show the template type code for those ids .",
            "sql": "select t2 . template_id , t1 . template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "How about their template type descriptions ?",
            "sql": "select t1 . template_type_description from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code join documents as t3 on t2 . template_id = t3 . template_id"
        },
        {
            "utterance": "Show the distinct values among them .",
            "sql": "select distinct t1 . template_type_description from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code join documents as t3 on t2 . template_id = t3 . template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the template ids with template type description \"Presentation\".",
        "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    "interaction": [
        {
            "utterance": "Show the template id for all templates .",
            "sql": "select template_id from templates"
        },
        {
            "utterance": "Also show their template type description .",
            "sql": "select t2 . template_id , t1 . template_type_description from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code"
        },
        {
            "utterance": "What are the template ids with description `` Presentation '' ?",
            "sql": "select t2 . template_id from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code where t1 . template_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 29,
    "final": {
        "utterance": "How many paragraphs in total?",
        "sql": "SELECT count(*) FROM Paragraphs"
    },
    "interaction": [
        {
            "utterance": "Show the info for all paragraphs .",
            "sql": "select * from paragraphs"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from paragraphs"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 30,
    "final": {
        "utterance": "How many paragraphs for the document with name 'Summer Show'?",
        "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    "interaction": [
        {
            "utterance": "Show the id for all paragraphs .",
            "sql": "select paragraph_id from paragraphs"
        },
        {
            "utterance": "Also show their document names .",
            "sql": "select t1 . paragraph_id , t2 . document_name from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id"
        },
        {
            "utterance": "Only show the id for all paragraphs in the document named 'Summer Show ' .",
            "sql": "select t1 . paragraph_id from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id where t2 . document_name = value"
        },
        {
            "utterance": "How many such paragraphs are there ?",
            "sql": "select count ( * ) from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id where t2 . document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 31,
    "final": {
        "utterance": "Show paragraph details for paragraph with text 'Korea'.",
        "sql": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'"
    },
    "interaction": [
        {
            "utterance": "Show the parapraph text for all paragraphs .",
            "sql": "select paragraph_text from paragraphs"
        },
        {
            "utterance": "Also show their paragraph details .",
            "sql": "select other_details , paragraph_text from paragraphs"
        },
        {
            "utterance": "What are the details for the paragraph containing 'Korea ' ?",
            "sql": "select other_details from paragraphs where paragraph_text = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 32,
    "final": {
        "utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    "interaction": [
        {
            "utterance": "Show all paragraph ids and texts .",
            "sql": "select paragraph_id , paragraph_text from paragraphs"
        },
        {
            "utterance": "For each of them , also show their document name .",
            "sql": "select t1 . paragraph_id , t1 . paragraph_text , t2 . document_name from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id"
        },
        {
            "utterance": "What are the ids and texts for the paragraph in the document with name 'Welcome to NY ' ?",
            "sql": "select t1 . paragraph_id , t1 . paragraph_text from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id where t2 . document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 33,
    "final": {
        "utterance": "Show all paragraph texts for the document \"Customer reviews\".",
        "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    "interaction": [
        {
            "utterance": "Show all paragraph text .",
            "sql": "select paragraph_text from paragraphs"
        },
        {
            "utterance": "For each of them , also show the document name .",
            "sql": "select t1 . paragraph_text , t2 . document_name from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id"
        },
        {
            "utterance": "What is the text for the document `` Customer reviews '' ?",
            "sql": "select t1 . paragraph_text from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id where t2 . document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 34,
    "final": {
        "utterance": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    "interaction": [
        {
            "utterance": "Show the document id for all paragraphs .",
            "sql": "select document_id from paragraphs"
        },
        {
            "utterance": "For each id , show the number of paragraphs .",
            "sql": "select document_id , count ( * ) from paragraphs group by document_id"
        },
        {
            "utterance": "Order by document id .",
            "sql": "select document_id , count ( * ) from paragraphs group by document_id order by document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 35,
    "final": {
        "utterance": "Show all document ids, names and the number of paragraphs in each document.",
        "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    "interaction": [
        {
            "utterance": "Show all document ids and names .",
            "sql": "select document_id , document_name from documents"
        },
        {
            "utterance": "For each of them , count the number of paragraphs in each document .",
            "sql": "select t1 . document_id , t2 . document_name , count ( * ) from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id group by t1 . document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 36,
    "final": {
        "utterance": "List all document ids with at least two paragraphs.",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the document id for all paragraphs .",
            "sql": "select document_id from paragraphs"
        },
        {
            "utterance": "For each of these document ids , count the number of paragraphs .",
            "sql": "select document_id , count ( * ) from paragraphs group by document_id"
        },
        {
            "utterance": "Which of them have at least two paragraphs ?",
            "sql": "select document_id from paragraphs group by document_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the document id and name with greatest number of paragraphs?",
        "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the id number and name for all documents .",
            "sql": "select document_id , document_name from documents"
        },
        {
            "utterance": "Also show the paragraph id for those documents .",
            "sql": "select t1 . document_id , t2 . document_name , t1 . paragraph_id from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id"
        },
        {
            "utterance": "For each of these results , count the number of paragraphs .",
            "sql": "select t1 . document_id , t2 . document_name , count ( * ) from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id group by t1 . document_id"
        },
        {
            "utterance": "Which of them is the longest ?",
            "sql": "select t1 . document_id , t2 . document_name from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id group by t1 . document_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the document id with least number of paragraphs?",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the document id for all paragraphs .",
            "sql": "select document_id from paragraphs"
        },
        {
            "utterance": "For each of them , count the number of paragraphs .",
            "sql": "select document_id , count ( * ) from paragraphs group by document_id"
        },
        {
            "utterance": "Sort them by these counts .",
            "sql": "select document_id from paragraphs group by document_id order by count ( * )"
        },
        {
            "utterance": "Which has the fewest ?",
            "sql": "select document_id from paragraphs group by document_id order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the document id with 1 to 2 paragraphs?",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    "interaction": [
        {
            "utterance": "Show the document id for all paragraphs .",
            "sql": "select document_id from paragraphs"
        },
        {
            "utterance": "For each of these ids , show the number of paragraphs .",
            "sql": "select document_id , count ( * ) from paragraphs group by document_id"
        },
        {
            "utterance": "Which of them have between 1 and 2 paragraphs ?",
            "sql": "select document_id from paragraphs group by document_id having count ( * ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 0,
    "final": {
        "utterance": "Which states have both owners and professionals living there?",
        "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    "interaction": [
        {
            "utterance": "List all the information about the owners .",
            "sql": "select * from owners"
        },
        {
            "utterance": "What about the Professionals ?",
            "sql": "select * from professionals"
        },
        {
            "utterance": "Now show the states of them .",
            "sql": "select state from professionals"
        },
        {
            "utterance": "Which of them have both owners and professionals living there ?",
            "sql": "select state from owners intersect select state from professionals"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the average age of the dogs who have gone through any treatments?",
        "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "Show all the dog ages .",
            "sql": "select age from dogs"
        },
        {
            "utterance": "What is the maximum and minimum value ?",
            "sql": "select max ( age ) , min ( age ) from dogs"
        },
        {
            "utterance": "Which of the dogs have gone through treatments ?",
            "sql": "select * from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "What about the average age of them ?",
            "sql": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 2,
    "final": {
        "utterance": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "List all the professionals who are Employees .",
            "sql": "select * from professionals where role_code = value"
        },
        {
            "utterance": "How many of them live in Connecticut ?",
            "sql": "select count ( * ) from professionals where state = value"
        },
        {
            "utterance": "What about in Indiana ?",
            "sql": "select count ( * ) from professionals where state = value"
        },
        {
            "utterance": "Among all the professionals , which have done treatment only 1 treatments ?",
            "sql": "select * from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) = value"
        },
        {
            "utterance": "List the id , last name and cell phone of the professionals who live in the state of Indiana or have done treatment on more than 2 treatments ?",
            "sql": "select professional_id , last_name , cell_number from professionals where state = value union select t1 . professional_id , t1 . last_name , t1 . cell_number from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 3,
    "final": {
        "utterance": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "sql": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )"
    },
    "interaction": [
        {
            "utterance": "Show the dog name and total cost of each dog .",
            "sql": "select name , sum ( cost_of_treatment ) from treatments as t1 join dogs as t2 on t1 . dog_id = t2 . dog_id group by t1 . dog_id"
        },
        {
            "utterance": "Which of them cost over 500 ?",
            "sql": "select name from treatments as t1 join dogs as t2 on t1 . dog_id = t2 . dog_id group by t1 . dog_id having sum ( cost_of_treatment ) > value"
        },
        {
            "utterance": "What about more than 1000 ?",
            "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 4,
    "final": {
        "utterance": "Which first names are used for professionals or owners but are not used as dog names?",
        "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    "interaction": [
        {
            "utterance": "List all the names of both Professionals and Owners .",
            "sql": "select first_name from professionals union select first_name from owners"
        },
        {
            "utterance": "What about the dog names ?",
            "sql": "select name from dogs"
        },
        {
            "utterance": "Which human names are not used as dog names .",
            "sql": "select first_name from professionals union select first_name from owners except select name from dogs"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 5,
    "final": {
        "utterance": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    "interaction": [
        {
            "utterance": "Show the professional first names and the corresponding treatment type codes for the treatment .",
            "sql": "select t1 . first_name , t2 . treatment_type_code from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id"
        },
        {
            "utterance": "What about each professional 's id , role , email and the treatment type code ?",
            "sql": "select t1 . professional_id , t1 . role_code , t1 . email_address , t2 . treatment_type_code from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id"
        },
        {
            "utterance": "Which professional did not provide any treatment ? Keep the id , role and email .",
            "sql": "select professional_id , role_code , email_address from professionals except select t1 . professional_id , t1 . role_code , t1 . email_address from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 6,
    "final": {
        "utterance": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the number of dogs for each owner , keep the owner id .",
            "sql": "select t1 . owner_id , count ( * ) from dogs as t1 join owners as t2 on t1 . owner_id = t2 . owner_id group by t1 . owner_id"
        },
        {
            "utterance": "Which one has 2 dogs ?",
            "sql": "select t1 . owner_id , t2 . first_name , t2 . last_name , count ( * ) from dogs as t1 join owners as t2 on t1 . owner_id = t2 . owner_id group by t1 . owner_id having count ( * ) = value"
        },
        {
            "utterance": "What about the one with the most dogs ?",
            "sql": "select t1 . owner_id , t2 . first_name , t2 . last_name from dogs as t1 join owners as t2 on t1 . owner_id = t2 . owner_id group by t1 . owner_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 7,
    "final": {
        "utterance": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many treatment does each professional finished ?",
            "sql": "select t1 . professional_id , count ( * ) from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id"
        },
        {
            "utterance": "Show the first name of the professionals who did only 1 treatment .",
            "sql": "select t1 . first_name from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) = value"
        },
        {
            "utterance": "What about at least two treatments ?",
            "sql": "select t1 . first_name from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) > = value"
        },
        {
            "utterance": "Show the id , role , and first name of each from the above .",
            "sql": "select t1 . professional_id , t1 . role_code , t1 . first_name from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the breed with the most dogs?",
        "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many dogs for each breed code ?",
            "sql": "select breed_code , count ( * ) from dogs group by breed_code"
        },
        {
            "utterance": "Which breed codes are the most popular two ?",
            "sql": "select breed_code , count ( * ) from dogs group by breed_code limit value"
        },
        {
            "utterance": "What about the most common 1 ?",
            "sql": "select breed_code , count ( * ) from dogs group by breed_code limit value"
        },
        {
            "utterance": "What name is the breed ?",
            "sql": "select t1 . breed_name from breeds as t1 join dogs as t2 on t1 . breed_code = t2 . breed_code group by t1 . breed_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 9,
    "final": {
        "utterance": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the dog name and total cost of each dog .",
            "sql": "select name , sum ( cost_of_treatment ) from treatments as t1 join dogs as t2 on t1 . dog_id = t2 . dog_id group by t1 . dog_id"
        },
        {
            "utterance": "What are the owner names and the cost from their dogs .",
            "sql": "select t1 . owner_id , t3 . cost_of_treatment from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id group by t1 . owner_id"
        },
        {
            "utterance": "Who has paid for the most treatments on the dogs ? Keep owner IDs and last names .",
            "sql": "select t1 . owner_id , t1 . last_name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id group by t1 . owner_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the description of the treatment type that costs the least money in total?",
        "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the treatment type code and the description .",
            "sql": "select * from treatment_types"
        },
        {
            "utterance": "For each treatment type , calculate the sum of costs , and order them in descending order .",
            "sql": "select treatment_type_code , sum ( cost_of_treatment ) from treatments group by treatment_type_code order by sum ( cost_of_treatment ) desc"
        },
        {
            "utterance": "Show the treatment type description also .",
            "sql": "select t2 . treatment_type_code , t1 . treatment_type_description , sum ( cost_of_treatment ) from treatment_types as t1 join treatments as t2 on t1 . treatment_type_code = t2 . treatment_type_code group by t1 . treatment_type_code order by sum ( cost_of_treatment ) asc limit value"
        },
        {
            "utterance": "So what is the description of the treatment type that costs the least money in total ?",
            "sql": "select t1 . treatment_type_description from treatment_types as t1 join treatments as t2 on t1 . treatment_type_code = t2 . treatment_type_code group by t1 . treatment_type_code order by sum ( cost_of_treatment ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 11,
    "final": {
        "utterance": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the dog name and total cost of each dog .",
            "sql": "select name , sum ( cost_of_treatment ) from treatments as t1 join dogs as t2 on t1 . dog_id = t2 . dog_id group by t1 . dog_id"
        },
        {
            "utterance": "How many of them cost over 700 ?",
            "sql": "select count ( name ) from treatments as t1 join dogs as t2 on t1 . dog_id = t2 . dog_id group by t1 . dog_id having sum ( cost_of_treatment ) > value"
        },
        {
            "utterance": "Which owner paid the cost larger than 400 , show the owner id and the zip code ?",
            "sql": "select t1 . owner_id , t1 . zip_code from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id group by t1 . owner_id having sum ( t3 . cost_of_treatment ) > value"
        },
        {
            "utterance": "What about the owner who spent the largest cost ?",
            "sql": "select t1 . owner_id , t1 . zip_code from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id group by t1 . owner_id order by sum ( t3 . cost_of_treatment ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 12,
    "final": {
        "utterance": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "List the professional first names and their types of treatments .",
            "sql": "select t1 . first_name , t2 . treatment_type_code from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id"
        },
        {
            "utterance": "Add the counts of them also .",
            "sql": "select t1 . first_name , t2 . treatment_type_code , count ( * ) from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id"
        },
        {
            "utterance": "Among the results , who did only 1 type of treatment ? List the professional ids and cell phone numbers of them .",
            "sql": "select t1 . professional_id , t1 . cell_number from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) = value"
        },
        {
            "utterance": "What about at least two types of treatments ?",
            "sql": "select t1 . professional_id , t1 . cell_number from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "What is the minimum , maximum and average value of the treatment costs ?",
            "sql": "select min ( cost_of_treatment ) , max ( cost_of_treatment ) , avg ( cost_of_treatment ) from treatments"
        },
        {
            "utterance": "Which professionals who did the minimum value of the treatment cost ? Provide the first name and last name .",
            "sql": "select distinct t1 . first_name , t1 . last_name from professionals as t1 join treatments as t2 where cost_of_treatment = ( select min ( cost_of_treatment ) from treatments )"
        },
        {
            "utterance": "What about the maximum cost ?",
            "sql": "select distinct t1 . first_name , t1 . last_name from professionals as t1 join treatments as t2 where cost_of_treatment = ( select max ( cost_of_treatment ) from treatments )"
        },
        {
            "utterance": "How about below the average of the cost ?",
            "sql": "select distinct t1 . first_name , t1 . last_name from professionals as t1 join treatments as t2 where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 14,
    "final": {
        "utterance": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    "interaction": [
        {
            "utterance": "How many dogs for each breed code ?",
            "sql": "select breed_code , count ( * ) from dogs group by breed_code"
        },
        {
            "utterance": "Which one is the most popular one ?",
            "sql": "select breed_code , count ( * ) from dogs group by breed_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the least popular one ?",
            "sql": "select breed_code , count ( * ) from dogs group by breed_code order by count ( * ) asc limit value"
        },
        {
            "utterance": "So which dogs are having the breed code ? And the treatment dates ?",
            "sql": "select t1 . name , t2 . date_of_treatment from dogs as t1 join treatments as t2 on t1 . dog_id = t2 . dog_id where t1 . breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 15,
    "final": {
        "utterance": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    "interaction": [
        {
            "utterance": "Show the name of dogs whose owners are from the city 'Lake Tia ' .",
            "sql": "select t2 . name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . city = value"
        },
        {
            "utterance": "Add the owner 's first names also .",
            "sql": "select t1 . first_name , t2 . name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . city = value"
        },
        {
            "utterance": "What about when the owner is from the state of 'Virginia ' ?",
            "sql": "select t1 . first_name , t2 . name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 16,
    "final": {
        "utterance": "List the last name of the owner owning the youngest dog.",
        "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT min(age) FROM Dogs )"
    },
    "interaction": [
        {
            "utterance": "Which one is the oldest dog ? List the information of it .",
            "sql": "select * from dogs order by age asc limit value"
        },
        {
            "utterance": "What are the last names of the oldest dogs ?",
            "sql": "select t1 . last_name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t2 . age = ( select max ( age ) from dogs )"
        },
        {
            "utterance": "What about the owner last name of the youngest dog ?",
            "sql": "select t1 . last_name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t2 . age = ( select min ( age ) from dogs )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 17,
    "final": {
        "utterance": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    "interaction": [
        {
            "utterance": "Show the cities and states of the professionals .",
            "sql": "select city , state from professionals"
        },
        {
            "utterance": "How many of them are from 'Hawaii ' ?",
            "sql": "select count ( * ) from professionals where state = value"
        },
        {
            "utterance": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin .",
            "sql": "select email_address from professionals where state = value or state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 18,
    "final": {
        "utterance": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    "interaction": [
        {
            "utterance": "Show the states of the professionals .",
            "sql": "select state from professionals"
        },
        {
            "utterance": "How many of them are from 'Wisconsin ' ?",
            "sql": "select count ( * ) from professionals where state = value"
        },
        {
            "utterance": "List the role code , street , city , state from the above results .",
            "sql": "select role_code , street , city , state from professionals where state = value"
        },
        {
            "utterance": "What about those professionals who live in a city containing the substring 'West ' ?",
            "sql": "select role_code , street , city , state from professionals where city like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 19,
    "final": {
        "utterance": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    "interaction": [
        {
            "utterance": "Show the states of the owners .",
            "sql": "select state from owners"
        },
        {
            "utterance": "How many of them are from 'Vermont ' ?",
            "sql": "select count ( * ) from owners where state = value"
        },
        {
            "utterance": "List the first name , last name and email of the owners who lives in the states that has the substring 'North ' .",
            "sql": "select first_name , last_name , email_address from owners where state like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 20,
    "final": {
        "utterance": "How many dogs have an age below the average?",
        "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    "interaction": [
        {
            "utterance": "Order the dog ages in descending order .",
            "sql": "select age from dogs order by age"
        },
        {
            "utterance": "How many of them are below 4 ?",
            "sql": "select count ( * ) from dogs where age < value"
        },
        {
            "utterance": "What about the ones that are below the average ?",
            "sql": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 21,
    "final": {
        "utterance": "How much does the most recent treatment cost?",
        "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the treatment details .",
            "sql": "select * from treatments"
        },
        {
            "utterance": "Order the cost in ascending order .",
            "sql": "select cost_of_treatment from treatments order by cost_of_treatment asc"
        },
        {
            "utterance": "What about in descending order ?",
            "sql": "select cost_of_treatment from treatments order by cost_of_treatment desc"
        },
        {
            "utterance": "Which one is the most recent cost ?",
            "sql": "select cost_of_treatment from treatments order by date_of_treatment desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 22,
    "final": {
        "utterance": "How many dogs have not gone through any treatment?",
        "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "Show all the owner information .",
            "sql": "select * from owners"
        },
        {
            "utterance": "What about the dogs ?",
            "sql": "select count ( * ) from dogs"
        },
        {
            "utterance": "Among those , how many of them have been sent to receive treatment ?",
            "sql": "select count ( * ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "What about those who did not ?",
            "sql": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 23,
    "final": {
        "utterance": "How many owners temporarily do not have any dogs?",
        "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    "interaction": [
        {
            "utterance": "Show all the owner information .",
            "sql": "select * from owners"
        },
        {
            "utterance": "How many of them come from the state of 'Arizona ' ?",
            "sql": "select count ( * ) from owners where state = value"
        },
        {
            "utterance": "What about those who do not have any dogs temporarily ?",
            "sql": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 24,
    "final": {
        "utterance": "How many professionals did not operate any treatment on dogs?",
        "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "How many professionals are there ?",
            "sql": "select count ( * ) from professionals"
        },
        {
            "utterance": "How many of them come from 'West Heidi ? '",
            "sql": "select count ( * ) from professionals where city = value"
        },
        {
            "utterance": "What about those who did not operate any treatment on dogs ?",
            "sql": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 0,
    "final": {
        "utterance": "How many available features are there in total?",
        "sql": "SELECT count(*) FROM Other_Available_Features"
    },
    "interaction": [
        {
            "utterance": "Show all the available features .",
            "sql": "select * from other_available_features"
        },
        {
            "utterance": "How many available features are there ?",
            "sql": "select count ( * ) from other_available_features"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the feature type name of feature AirCon?",
        "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
    },
    "interaction": [
        {
            "utterance": "Find the available features with feature name `` AirCon '' .",
            "sql": "select * from other_available_features where feature_name = value"
        },
        {
            "utterance": "What is the feature type name ?",
            "sql": "select t2 . feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1 . feature_type_code = t2 . feature_type_code where t1 . feature_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the property type descriptions of properties belonging to that code.",
        "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
    },
    "interaction": [
        {
            "utterance": "What is the property type description of each property ?",
            "sql": "select t2 . property_type_description from properties as t1 join ref_property_types as t2 on t1 . property_type_code = t2 . property_type_code"
        },
        {
            "utterance": "Show the property type descriptions of properties for each property type code .",
            "sql": "select t2 . property_type_description from properties as t1 join ref_property_types as t2 on t1 . property_type_code = t2 . property_type_code group by t1 . property_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of singers whose birth year is either 1948 or 1949?",
        "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    "interaction": [
        {
            "utterance": "Show the names and birth years of singers",
            "sql": "select name , birth_year from singer"
        },
        {
            "utterance": "Only for the ones born in 1948 .",
            "sql": "select name , birth_year from singer where birth_year = value"
        },
        {
            "utterance": "Show the name of singers whose birth year is either 1948 or 1949 ?",
            "sql": "select name from singer where birth_year = value or birth_year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the singer with the largest net worth?",
        "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name and net worth of the singers .",
            "sql": "select name , net_worth_millions from singer"
        },
        {
            "utterance": "Order by richest first .",
            "sql": "select name from singer order by net_worth_millions desc"
        },
        {
            "utterance": "What is the name of the singer with the largest net worth ?",
            "sql": "select name from singer order by net_worth_millions desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the most common citizenship of singers.",
        "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the names and citizenships of singers .",
            "sql": "select name , citizenship from singer"
        },
        {
            "utterance": "Show citizenship counts .",
            "sql": "select citizenship , count ( * ) from singer group by citizenship"
        },
        {
            "utterance": "Sort that by most common first .",
            "sql": "select citizenship from singer group by citizenship order by count ( * ) desc"
        },
        {
            "utterance": "Limit it to one .",
            "sql": "select citizenship from singer group by citizenship order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 3,
    "final": {
        "utterance": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    "interaction": [
        {
            "utterance": "Join singer names with their song titles .",
            "sql": "select t1 . name , t2 . title from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id"
        },
        {
            "utterance": "Limit the entries to where song sales exceed 300000 .",
            "sql": "select t1 . name , t2 . title from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id where t2 . sales > value"
        },
        {
            "utterance": "Which are the distinct names in that list ?",
            "sql": "select distinct t1 . name from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id where t2 . sales > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of singers that have more than one song.",
        "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show the names and song counts of singers .",
            "sql": "select t1 . name , count ( * ) from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id group by t1 . name"
        },
        {
            "utterance": "Show the names of singers that have more than one song .",
            "sql": "select t1 . name from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id group by t1 . name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of singers and the total sales of their songs.",
        "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    "interaction": [
        {
            "utterance": "Show the songs and sale amounts .",
            "sql": "select title , sales from song"
        },
        {
            "utterance": "Show the names of singers and the total sales of their songs .",
            "sql": "select t1 . name , sum ( t2 . sales ) from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id group by t1 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 6,
    "final": {
        "utterance": "List the name of singers that do not have any song.",
        "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    "interaction": [
        {
            "utterance": "Which singer ids have at least one song ?",
            "sql": "select distinct singer_id from song"
        },
        {
            "utterance": "Which singer names do not ?",
            "sql": "select name from singer where singer_id not in ( select singer_id from song )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many high schoolers are there in grade 9 or 10?",
        "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    "interaction": [
        {
            "utterance": "How many high schoolers are there ?",
            "sql": "select count ( * ) from highschooler"
        },
        {
            "utterance": "How many in each grade 11 or 12 ?",
            "sql": "select count ( * ) from highschooler where grade = value or grade = value"
        },
        {
            "utterance": "How many in grade 9 or 10 ?",
            "sql": "select count ( * ) from highschooler where grade = value or grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which grade has the most high schoolers?",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many distinct grades are there ?",
            "sql": "select count ( distinct grade ) from highschooler"
        },
        {
            "utterance": "What are they ?",
            "sql": "select distinct grade from highschooler"
        },
        {
            "utterance": "Which one has the least number of highschoolers ?",
            "sql": "select grade from highschooler group by grade order by count ( * ) asc limit value"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select grade from highschooler group by grade order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show me all grades that have at least 4 students.",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    "interaction": [
        {
            "utterance": "How many highschoolers are there in total ?",
            "sql": "select count ( * ) from highschooler"
        },
        {
            "utterance": "How many per grade ?",
            "sql": "select grade , count ( * ) from highschooler group by grade"
        },
        {
            "utterance": "What grades have at least 10 students ?",
            "sql": "select grade from highschooler group by grade having count ( * ) > = value"
        },
        {
            "utterance": "How about at least 4 ?",
            "sql": "select grade from highschooler group by grade having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of high school students and their corresponding number of friends.",
        "sql": "SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the high school students ?",
            "sql": "select name from highschooler"
        },
        {
            "utterance": "Show the names of the friends for each one .",
            "sql": "select t2 . name , t3 . name from friend as t1 join highschooler as t2 on friend_id = t2 . id join highschooler as t3 on student_id = t3 . id"
        },
        {
            "utterance": "How many friends does each student each have ?",
            "sql": "select t2 . name , count ( * ) from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the high schooler who has the greatest number of friends?",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the high schoolers ?",
            "sql": "select name from highschooler"
        },
        {
            "utterance": "Show me the number of friends for each one .",
            "sql": "select t2 . name , count ( * ) from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id"
        },
        {
            "utterance": "Which one has the least number of friends ?",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "How about the greatest ?",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of high schoolers who have at least 3 friends.",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "How many highschoolers have more than 5 ?",
            "sql": "select count ( * ) from ( select * from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > value )"
        },
        {
            "utterance": "at least 3 ?",
            "sql": "select count ( * ) from ( select * from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of all of the high schooler Kyle's friends.",
        "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "Show me information on the high schooler named `` Kyle . ''",
            "sql": "select * from highschooler where name = value"
        },
        {
            "utterance": "How many friends does he have ?",
            "sql": "select count ( * ) from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . friend_id = t3 . id where t2 . name = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t3 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . friend_id = t3 . id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many friends does the high school student Kyle have?",
        "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "Is there a highschooler named Kyle ?",
            "sql": "select * from highschooler where name = value"
        },
        {
            "utterance": "Who does he like ?",
            "sql": "select t3 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . liked_id = t3 . id where t2 . name = value"
        },
        {
            "utterance": "What are the names of his friends ?",
            "sql": "select t3 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . friend_id = t3 . id where t2 . name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . friend_id = t3 . id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Show ids of all students who do not have any friends.",
        "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    "interaction": [
        {
            "utterance": "Show me all the high school student ids .",
            "sql": "select id from highschooler"
        },
        {
            "utterance": "How many friends do each of them have ?",
            "sql": "select student_id , count ( * ) from friend group by student_id"
        },
        {
            "utterance": "Which ones have at least 1 ?",
            "sql": "select student_id from friend"
        },
        {
            "utterance": "Which ones have none ?",
            "sql": "select id from highschooler except select student_id from friend"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Show names of all high school students who do not have any friends.",
        "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the highshcool students ?",
            "sql": "select name from highschooler"
        },
        {
            "utterance": "Which ones have at least 5 friends ?",
            "sql": "select count ( * ) from ( select * from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value )"
        },
        {
            "utterance": "how about at least 1 ?",
            "sql": "select distinct t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id"
        },
        {
            "utterance": "how about 0 ?",
            "sql": "select name from highschooler except select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    "interaction": [
        {
            "utterance": "Show me the ids of all highschoolers who have friends ?",
            "sql": "select student_id from friend"
        },
        {
            "utterance": "Also show , for each , the ids of the people they like ?",
            "sql": "select distinct t1 . student_id , t2 . liked_id from friend as t1 join likes as t2 on t1 . student_id = t2 . student_id"
        },
        {
            "utterance": "Now only show those who are liked by someone else !",
            "sql": "select distinct t1 . student_id , t2 . liked_id from friend as t1 join likes as t2 on t1 . student_id = t2 . student_id where t1 . student_id in ( select liked_id from likes )"
        },
        {
            "utterance": "Show me just their ids !",
            "sql": "select student_id from friend intersect select liked_id from likes"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Show name of all students who have some friends and also are liked by someone else.",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    "interaction": [
        {
            "utterance": "How many high schoolers are liked by someone else ?",
            "sql": "select count ( * ) from likes as t1 join highschooler as t2 on t1 . liked_id = t2 . id"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . liked_id = t2 . id"
        },
        {
            "utterance": "How many of them have friends ?",
            "sql": "select count ( * ) from ( select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id intersect select t2 . name from likes as t1 join highschooler as t2 on t1 . liked_id = t2 . id )"
        },
        {
            "utterance": "Who are they ?",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id intersect select t2 . name from likes as t1 join highschooler as t2 on t1 . liked_id = t2 . id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of the highschoolers who do n't like anyone ?",
            "sql": "select name from highschooler where id not in ( select student_id from likes )"
        },
        {
            "utterance": "How about those who like others ?",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id"
        },
        {
            "utterance": "How many people do they each like ?",
            "sql": "select t2 . name , count ( * ) from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the name of the high schooler who has the greatest number of likes?",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many high schoolers like somebody else ?",
            "sql": "select count ( distinct student_id ) from likes"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id"
        },
        {
            "utterance": "what is the greatest number of likes anyone has ?",
            "sql": "select count ( * ) from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "who has the greatest number of likes ?",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the names of students who have at least 2 likes.",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all students ?",
            "sql": "select name from highschooler"
        },
        {
            "utterance": "How about those who like at least one other person !",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        },
        {
            "utterance": "How about those who like at least two other students !",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the names of the students who have some friends ?",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id"
        },
        {
            "utterance": "How about those have at least 2 friends ?",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        },
        {
            "utterance": "What grades are they each in ?",
            "sql": "select t2 . name , t2 . grade from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        },
        {
            "utterance": "Show me the names of only those who are in a grade higher than 5 !",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id where t2 . grade > value group by t1 . student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 16,
    "final": {
        "utterance": "How many likes does Kyle have?",
        "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "What grade is the student named Kyle in ?",
            "sql": "select grade from highschooler where name = value"
        },
        {
            "utterance": "How many other students like him ?",
            "sql": "select count ( * ) from likes as t1 join highschooler as t2 on t1 . liked_id = t2 . id where t2 . name = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t3 . name from likes as t1 join highschooler as t2 on t1 . liked_id = t2 . id join highschooler as t3 on t3 . id = t1 . student_id where t2 . name = value"
        },
        {
            "utterance": "How many other students does he like ?",
            "sql": "select count ( * ) from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the average grade of all students who have some friends.",
        "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    "interaction": [
        {
            "utterance": "Show me the student_id and the grade for all students .",
            "sql": "select id , grade from highschooler"
        },
        {
            "utterance": "What is the average grade ?",
            "sql": "select avg ( grade ) from highschooler"
        },
        {
            "utterance": "How about for students who have no friends ?",
            "sql": "select avg ( grade ) from highschooler where id not in ( select t1 . student_id from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id )"
        },
        {
            "utterance": "How about for those who have some friends ?",
            "sql": "select avg ( grade ) from highschooler where id in ( select t1 . student_id from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 0,
    "final": {
        "utterance": "How many poker players are there?",
        "sql": "SELECT count(*) FROM poker_player"
    },
    "interaction": [
        {
            "utterance": "Show all the poker players .",
            "sql": "select * from poker_player"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from poker_player"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 1,
    "final": {
        "utterance": "List the earnings of poker players in descending order.",
        "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    "interaction": [
        {
            "utterance": "What is the earnings of each poker player ?",
            "sql": "select earnings from poker_player"
        },
        {
            "utterance": "Sort them in descending order .",
            "sql": "select earnings from poker_player order by earnings desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 2,
    "final": {
        "utterance": "List the final tables made and the best finishes of poker players.",
        "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    "interaction": [
        {
            "utterance": "Show all the information about each poker player .",
            "sql": "select * from poker_player"
        },
        {
            "utterance": "What are their final table mades ?",
            "sql": "select final_table_made from poker_player"
        },
        {
            "utterance": "What are their final table mades and best finishes ?",
            "sql": "select final_table_made , best_finish from poker_player"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average earnings of poker players?",
        "sql": "SELECT avg(Earnings) FROM poker_player"
    },
    "interaction": [
        {
            "utterance": "What is the earnings of each poker player ?",
            "sql": "select earnings from poker_player"
        },
        {
            "utterance": "Give me the average .",
            "sql": "select avg ( earnings ) from poker_player"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the money rank of the poker player with the highest earnings?",
        "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the money rank of each poker player ?",
            "sql": "select money_rank from poker_player"
        },
        {
            "utterance": "Sort them in the decreasing order .",
            "sql": "select money_rank from poker_player order by earnings desc"
        },
        {
            "utterance": "Return the top one .",
            "sql": "select money_rank from poker_player order by earnings desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    "interaction": [
        {
            "utterance": "Which poker player has earnings less than 200000 ?",
            "sql": "select * from poker_player where earnings < value"
        },
        {
            "utterance": "Among them , what is the maximum number of final tables made ?",
            "sql": "select max ( final_table_made ) from poker_player where earnings < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of poker players?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    "interaction": [
        {
            "utterance": "Show all the poker players .",
            "sql": "select * from poker_player"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of poker players whose earnings is higher than 300000?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    "interaction": [
        {
            "utterance": "Which poker players have earnings higher than 300000 ?",
            "sql": "select * from poker_player where earnings > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t2 . earnings > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of poker players ordered by the final tables made in ascending order.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    "interaction": [
        {
            "utterance": "What are the names of all poker players ?",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Sort them in the ascending order of the final tables made .",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . final_table_made"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the birth date of the poker player with the lowest earnings?",
        "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the birth date of each poker player ?",
            "sql": "select t1 . birth_date from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Sort the list by the poker player 's earnings .",
            "sql": "select t1 . birth_date from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings"
        },
        {
            "utterance": "Give me the result for the player with the lowest earnings .",
            "sql": "select t1 . birth_date from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the money rank of the tallest poker player?",
        "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the height of each poker player ?",
            "sql": "select height from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Who has the largest height ?",
            "sql": "select * from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t1 . height desc limit value"
        },
        {
            "utterance": "What is his or her money rank ?",
            "sql": "select t2 . money_rank from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t1 . height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the average earnings of poker players with height higher than 200?",
        "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    "interaction": [
        {
            "utterance": "What is the height of each poker player ?",
            "sql": "select height from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Who all have heights greater than 200 ?",
            "sql": "select * from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t1 . height > value"
        },
        {
            "utterance": "What is the average earnings among them ?",
            "sql": "select avg ( t2 . earnings ) from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t1 . height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the names of poker players in descending order of earnings?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    "interaction": [
        {
            "utterance": "Sort all the poker players in descending order of earnings .",
            "sql": "select * from poker_player order by earnings desc"
        },
        {
            "utterance": "What are the names of poker players in descending order of earnings ?",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 13,
    "final": {
        "utterance": "What are different nationalities of people and the corresponding number of people from each nation?",
        "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    "interaction": [
        {
            "utterance": "Show the nationality of each person .",
            "sql": "select nationality from people"
        },
        {
            "utterance": "Group people by their nationality .",
            "sql": "select * from people group by nationality"
        },
        {
            "utterance": "For each of the result , show the corresponding number of people of that nationality ?",
            "sql": "select nationality , count ( * ) from people group by nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the most common nationality of people?",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the nationality of each person .",
            "sql": "select nationality from people"
        },
        {
            "utterance": "Count the number of people for each nationality .",
            "sql": "select count ( * ) from people group by nationality"
        },
        {
            "utterance": "What is the most common nationality of people ?",
            "sql": "select nationality from people group by nationality order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the nationalities that are shared by at least two people?",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Count the number of people for each nationality .",
            "sql": "select count ( * ) from people group by nationality"
        },
        {
            "utterance": "Which nationalities are held by at least two people ?",
            "sql": "select nationality from people group by nationality having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 16,
    "final": {
        "utterance": "List the names and birth dates of people in ascending alphabetical order of name.",
        "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    "interaction": [
        {
            "utterance": "What are the names and birth dates of people ?",
            "sql": "select name , birth_date from people"
        },
        {
            "utterance": "Sort the results in ascending alphabetical order of name .",
            "sql": "select name , birth_date from people order by name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 17,
    "final": {
        "utterance": "Show names of people whose nationality is not \"Russia\".",
        "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all people ?",
            "sql": "select name from people"
        },
        {
            "utterance": "What about people whose nationality is not `` Russia '' ?",
            "sql": "select name from people where nationality ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 18,
    "final": {
        "utterance": "List the names of people that are not poker players.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    "interaction": [
        {
            "utterance": "Show all the poker players .",
            "sql": "select * from poker_player"
        },
        {
            "utterance": "Show all people who are not poker players .",
            "sql": "select * from people where people_id not in ( select people_id from poker_player )"
        },
        {
            "utterance": "Give me their names .",
            "sql": "select name from people where people_id not in ( select people_id from poker_player )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    "interaction": [
        {
            "utterance": "show all visitors .",
            "sql": "select * from visitor"
        },
        {
            "utterance": "order them by their membership level from high to low .",
            "sql": "select * from visitor order by level_of_membership desc"
        },
        {
            "utterance": "just show their names .",
            "sql": "select name from visitor order by level_of_membership desc"
        },
        {
            "utterance": "do not list those whose membership level is lower than or equal to 4 .",
            "sql": "select name from visitor where level_of_membership > value order by level_of_membership desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    "interaction": [
        {
            "utterance": "find the number of visitors with a membership level higher than 4 .",
            "sql": "select count ( * ) from visitor where level_of_membership > value"
        },
        {
            "utterance": "what are their names and membership levels ?",
            "sql": "select name , level_of_membership from visitor where level_of_membership > value"
        },
        {
            "utterance": "sort by their age from old to young .",
            "sql": "select name , level_of_membership from visitor where level_of_membership > value order by age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the id and name of the museum that has the most staff members?",
        "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many museums are in the table ?",
            "sql": "select count ( * ) from museum"
        },
        {
            "utterance": "what is the average number of staff working in these museums ?",
            "sql": "select avg ( num_of_staff ) from museum"
        },
        {
            "utterance": "Find the name of the museum that has the most staff members .",
            "sql": "select name from museum order by num_of_staff desc limit value"
        },
        {
            "utterance": "what is its id ?",
            "sql": "select museum_id from museum order by num_of_staff desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 3,
    "final": {
        "utterance": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
    },
    "interaction": [
        {
            "utterance": "find the names of museums opened before 2010 .",
            "sql": "select name from museum where open_year < value"
        },
        {
            "utterance": "how about after ?",
            "sql": "select name from museum where open_year > value"
        },
        {
            "utterance": "find the minimum number of staff of those museums .",
            "sql": "select min ( num_of_staff ) from museum where open_year > value"
        },
        {
            "utterance": "find the names of museums which have more staff than that .",
            "sql": "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 4,
    "final": {
        "utterance": "find the id, name and age for visitors who visited some museums more than once.",
        "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "find the names of visitors who visited and who have some museum visit records .",
            "sql": "select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id"
        },
        {
            "utterance": "which of them visited some museums more than once ?",
            "sql": "select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "also show their ids and ages .",
            "sql": "select t1 . id , t1 . name , t1 . age from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id group by t1 . id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the total spent on all visits ?",
            "sql": "select sum ( total_spent ) from visit"
        },
        {
            "utterance": "find the name of the visitor who has spent the most money for his or her visits .",
            "sql": "select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id group by t2 . visitor_id order by sum ( t2 . total_spent ) desc limit value"
        },
        {
            "utterance": "what are his id and membership level ?",
            "sql": "select t2 . visitor_id , t1 . name , t1 . level_of_membership from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id group by t2 . visitor_id order by sum ( t2 . total_spent ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the id and name of the museum visited most times?",
        "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the id and name of all museums .",
            "sql": "select museum_id , name from museum"
        },
        {
            "utterance": "show the number of tickets sold for each of them .",
            "sql": "select t2 . museum_id , t1 . name , count ( * ) from museum as t1 join visit as t2 on t1 . museum_id = t2 . museum_id group by t2 . museum_id"
        },
        {
            "utterance": "which one was visited the most times ?",
            "sql": "select t2 . museum_id , t1 . name from museum as t1 join visit as t2 on t1 . museum_id = t2 . museum_id group by t2 . museum_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the museum that had no visitor yet?",
        "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
    },
    "interaction": [
        {
            "utterance": "how many museums are there ?",
            "sql": "select count ( * ) from museum"
        },
        {
            "utterance": "how many of them have not had any visitors yet ?",
            "sql": "select count ( * ) from museum where museum_id not in ( select museum_id from visit )"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select name from museum where museum_id not in ( select museum_id from visit )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and age of the visitor who bought the most tickets at once.",
        "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many tickets were sold from all of the museums ?",
            "sql": "select sum ( num_of_ticket ) from visit"
        },
        {
            "utterance": "find the id of the visitor who bought the most tickets at once .",
            "sql": "select visitor_id from visit order by num_of_ticket desc limit value"
        },
        {
            "utterance": "Find the name and age of this visitor .",
            "sql": "select t1 . name , t1 . age from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id order by t2 . num_of_ticket desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the average and maximum number of tickets bought in all visits?",
        "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
    },
    "interaction": [
        {
            "utterance": "find the total cost of all visits .",
            "sql": "select sum ( total_spent ) from visit"
        },
        {
            "utterance": "what was the amount of the largest one time purchase of tickets out of all visits ?",
            "sql": "select max ( total_spent ) from visit"
        },
        {
            "utterance": "how about the average and maximum number of tickets purchased ?",
            "sql": "select avg ( num_of_ticket ) , max ( num_of_ticket ) from visit"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the total ticket expense of the visitors whose membership level is 1?",
        "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
    },
    "interaction": [
        {
            "utterance": "what is the lowest level of membership ?",
            "sql": "select min ( level_of_membership ) from visitor"
        },
        {
            "utterance": "find the number of visitors whose membership level is 1 .",
            "sql": "select count ( * ) from visitor where level_of_membership = value"
        },
        {
            "utterance": "show the ticket expenses of all of their museum visits .",
            "sql": "select t2 . total_spent from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id where t1 . level_of_membership = value"
        },
        {
            "utterance": "what is the total amount of money spent ?",
            "sql": "select sum ( t2 . total_spent ) from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id where t1 . level_of_membership = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
    },
    "interaction": [
        {
            "utterance": "find the names of museums opened before 2009 .",
            "sql": "select name from museum where open_year < value"
        },
        {
            "utterance": "what about those opened after 2011 ?",
            "sql": "select name from museum where open_year > value"
        },
        {
            "utterance": "What is the name of the visitor who visited both groups of museums ?",
            "sql": "select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id join museum as t3 on t3 . museum_id = t2 . museum_id where t3 . open_year < value intersect select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id join museum as t3 on t3 . museum_id = t2 . museum_id where t3 . open_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the number of visitors who did not visit any museum opened after 2010.",
        "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
    },
    "interaction": [
        {
            "utterance": "find the names of museums opened after 2010",
            "sql": "select name from museum where open_year > value"
        },
        {
            "utterance": "find the number of visits to these museums ?",
            "sql": "select count ( * ) from museum as t1 join visit as t2 on t1 . museum_id = t2 . museum_id where t1 . open_year > value"
        },
        {
            "utterance": "Find the number of visitors who did not visit these museums .",
            "sql": "select count ( * ) from visitor where id not in ( select t2 . visitor_id from museum as t1 join visit as t2 on t1 . museum_id = t2 . museum_id where t1 . open_year > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 0,
    "final": {
        "utterance": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    "interaction": [
        {
            "utterance": "Tell me\ufeff the director of the cartoon named `` Day of the Dark Knight ! `` .",
            "sql": "select directed_by from cartoon where title = value"
        },
        {
            "utterance": "What is the channel of this cartoon ?",
            "sql": "select channel from cartoon where title = value"
        },
        {
            "utterance": "Give me the titles of all cartoon directed by `` Ben Jones '' or `` Brandon Vietti '' ?",
            "sql": "select title from cartoon where directed_by = value or directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 1,
    "final": {
        "utterance": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me all the information about the Italian TV Channels .",
            "sql": "select * from tv_channel where country = value"
        },
        {
            "utterance": "How about the Polish TV Channels ?",
            "sql": "select * from tv_channel where country = value"
        },
        {
            "utterance": "Which country has the most of TV Channels ? List the country and number of TV Channels it has .",
            "sql": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 2,
    "final": {
        "utterance": "List the number of different series names and contents in the TV Channel table.",
        "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    "interaction": [
        {
            "utterance": "Tell me the TV Channel of the cartoon titled `` The Eyes of Despero ! `` .",
            "sql": "select channel from cartoon where title = value"
        },
        {
            "utterance": "How about this channel 's series name ?",
            "sql": "select series_name from tv_channel where id in ( select channel from cartoon where title = value )"
        },
        {
            "utterance": "Tell me the number of different series names and contents in the TV Channel table .",
            "sql": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 3,
    "final": {
        "utterance": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Tell me the package option for the series named `` Rock TV '' .",
            "sql": "select package_option from tv_channel where series_name = value"
        },
        {
            "utterance": "tell me the language of this series .",
            "sql": "select language from tv_channel where series_name = value"
        },
        {
            "utterance": "List the language used least number of TV Channel . List language and number of TV Channel .",
            "sql": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    "interaction": [
        {
            "utterance": "Tell me the author of the cartoon `` The Rise of the Blue Beetle ! ''",
            "sql": "select written_by from cartoon where title = value"
        },
        {
            "utterance": "How about its director ?",
            "sql": "select directed_by from cartoon where title = value"
        },
        {
            "utterance": "What is its TV Channel ?",
            "sql": "select t1 . series_name from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 5,
    "final": {
        "utterance": "List the title of all Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    "interaction": [
        {
            "utterance": "tell me the country of the TV Channel for the series named `` Sky Radio '' .",
            "sql": "select country from tv_channel where series_name = value"
        },
        {
            "utterance": "How about its content ?",
            "sql": "select content from tv_channel where series_name = value"
        },
        {
            "utterance": "I want to know the title of all Cartoons showed on TV Channel with series name `` Sky Radio '' .",
            "sql": "select t2 . title from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t1 . series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 6,
    "final": {
        "utterance": "List top 3 highest Rating TV series. List the TV series's Episode and Rating.",
        "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "Tell me the rating of the episode named `` Double Down '' .",
            "sql": "select rating from tv_series where episode = value"
        },
        {
            "utterance": "How about the rating of the episode named `` Keepers '' .",
            "sql": "select rating from tv_series where episode = value"
        },
        {
            "utterance": "Okay , I want to know the top 3 highest Rating TV series . List the TV series 's Episode and Rating .",
            "sql": "select episode , rating from tv_series order by rating desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 7,
    "final": {
        "utterance": "What is minimum and maximum share of TV series?",
        "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    "interaction": [
        {
            "utterance": "tell me the weekly rank of the episode named `` Emily '' .",
            "sql": "select weekly_rank from tv_series where episode = value"
        },
        {
            "utterance": "How about its share ?",
            "sql": "select share from tv_series where episode = value"
        },
        {
            "utterance": "tell me the minimum and maximum share of TV series .",
            "sql": "select max ( share ) , min ( share ) from tv_series"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    "interaction": [
        {
            "utterance": "Tell me the rating of the episode titled `` A Love of a Lifetime '' .",
            "sql": "select rating from tv_series where episode = value"
        },
        {
            "utterance": "How about its weekly rank ?",
            "sql": "select weekly_rank from tv_series where episode = value"
        },
        {
            "utterance": "And What is its TV Channel ?",
            "sql": "select t1 . series_name from tv_channel as t1 join tv_series as t2 on t1 . id = t2 . channel where t2 . episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 9,
    "final": {
        "utterance": "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\".",
        "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    "interaction": [
        {
            "utterance": "tell me the content of TV Channel with the series named `` Sky Radio '' .",
            "sql": "select content from tv_channel where series_name = value"
        },
        {
            "utterance": "How about its language ?",
            "sql": "select language from tv_channel where series_name = value"
        },
        {
            "utterance": "Okay , now I want to know the Episode of all TV series showed on TV Channel with series name `` Sky Radio '' .",
            "sql": "select t2 . episode from tv_channel as t1 join tv_series as t2 on t1 . id = t2 . channel where t1 . series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the production code and channel of the most recently aired cartoon.",
        "sql": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the air date of the cartoon titled `` Fall of the Blue Beetle ! `` .",
            "sql": "select original_air_date from cartoon where title = value"
        },
        {
            "utterance": "What is its production code ?",
            "sql": "select production_code from cartoon where title = value"
        },
        {
            "utterance": "tell me the production code and channel of the most recently aired cartoon .",
            "sql": "select production_code , channel from cartoon order by original_air_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 11,
    "final": {
        "utterance": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Todd Casey'"
    },
    "interaction": [
        {
            "utterance": "Tell me the cartoons directed by Ben Jone .",
            "sql": "select title from cartoon where directed_by = value"
        },
        {
            "utterance": "Tell me the cartoons written by Todd Casey .",
            "sql": "select title from cartoon where written_by = value"
        },
        {
            "utterance": "Which countries ' tv channels are playing some cartoon written by Todd Casey ?",
            "sql": "select t1 . country from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 12,
    "final": {
        "utterance": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    "interaction": [
        {
            "utterance": "which countries ' tv channels are playing some cartoon written by Steven Melching ?",
            "sql": "select t1 . country from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . written_by = value"
        },
        {
            "utterance": "which countries ' tv channels are not playing any cartoon written by Todd Casey ?",
            "sql": "select country from tv_channel except select t1 . country from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    "interaction": [
        {
            "utterance": "Tell me the director of the cartoon titled `` Deep Cover for Batman ! `` .",
            "sql": "select directed_by from cartoon where title = value"
        },
        {
            "utterance": "I want to know this cartoon 's production code .",
            "sql": "select production_code from cartoon where title = value"
        },
        {
            "utterance": "Tell me the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang .",
            "sql": "select t1 . series_name , t1 . country from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . directed_by = value intersect select t1 . series_name , t1 . country from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 14,
    "final": {
        "utterance": "find id of the tv channels that from the countries where have more than two tv channels.",
        "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "tell me the country of the TV channel with series named `` MTV Music ''",
            "sql": "select country from tv_channel where series_name = value"
        },
        {
            "utterance": "Tell me the number of Italian channels .",
            "sql": "select count ( * ) from tv_channel where country = value"
        },
        {
            "utterance": "find id of the tv channels that from the countries where have more than two tv channels .",
            "sql": "select id from tv_channel group by country having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 15,
    "final": {
        "utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    "interaction": [
        {
            "utterance": "Who is the director of the cartoon titled `` Return of the Fearsome Fangs ! `` ?",
            "sql": "select directed_by from cartoon where title = value"
        },
        {
            "utterance": "Tell me the cartoons directed by Ben Jones .",
            "sql": "select title from cartoon where directed_by = value"
        },
        {
            "utterance": "Find the id of tv channels that do not play any cartoon directed by Ben Jones .",
            "sql": "select id from tv_channel except select channel from cartoon where directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many pets have a greater weight than 10?",
        "sql": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    "interaction": [
        {
            "utterance": "What information is there on pets ?",
            "sql": "select * from pets"
        },
        {
            "utterance": "Which pets weigh more than 10 ?",
            "sql": "select * from pets where weight > value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from pets where weight > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How much does the youngest dog weigh?",
        "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the pets by age",
            "sql": "select * from pets order by pet_age"
        },
        {
            "utterance": "How much does each one weigh ?",
            "sql": "select weight from pets order by pet_age"
        },
        {
            "utterance": "What about the first one ?",
            "sql": "select weight from pets order by pet_age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the maximum weight and type for each type of pet.",
        "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    "interaction": [
        {
            "utterance": "What are the different types of pets ?",
            "sql": "select distinct pettype from pets"
        },
        {
            "utterance": "For each of those types , what is the maximum weight ?",
            "sql": "select max ( weight ) , pettype from pets group by pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many pets are owned by students that have an age greater than 20?",
        "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    "interaction": [
        {
            "utterance": "Which pets are owned by students older than 20 ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid where t1 . age > value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid where t1 . age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 4,
    "final": {
        "utterance": "How many dog pets are raised by female students?",
        "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    "interaction": [
        {
            "utterance": "Who are the female students ?",
            "sql": "select * from student where sex = value"
        },
        {
            "utterance": "Of those , who has a pet ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid where t1 . sex = value"
        },
        {
            "utterance": "How many of those have dogs ?",
            "sql": "select count ( * ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t2 . petid = t3 . petid where t1 . sex = value and t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How many different types of pet are there?",
        "sql": "SELECT count(DISTINCT pettype) FROM pets"
    },
    "interaction": [
        {
            "utterance": "What are the different pet types ?",
            "sql": "select distinct pettype from pets"
        },
        {
            "utterance": "How many exist ?",
            "sql": "select count ( distinct pettype ) from pets"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the first names of every student who has a cat or dog as a pet?",
        "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    "interaction": [
        {
            "utterance": "what is the first name of every student ?",
            "sql": "select distinct t1 . fname from student as t1"
        },
        {
            "utterance": "Of those names , which ones correspond to somebody who has a cat ?",
            "sql": "select distinct t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "Also , combine those names with those who have a dog .",
            "sql": "select distinct t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value or t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the students' first names who have both cats and dogs as pets?",
        "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
    },
    "interaction": [
        {
            "utterance": "Which students have a dog as their type of pet ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "Who also has a cat ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value intersect select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value intersect select t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    "interaction": [
        {
            "utterance": "Which students have a cat as their pets ?",
            "sql": "select * from student where stuid not in ( select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value )"
        },
        {
            "utterance": "What are they majoring in ?",
            "sql": "select major from student where stuid not in ( select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value )"
        },
        {
            "utterance": "Also , how old are they ?",
            "sql": "select major , age from student where stuid not in ( select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the ids of the students who do not own cats as pets?",
        "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    "interaction": [
        {
            "utterance": "What is every student 's id ?",
            "sql": "select stuid from student"
        },
        {
            "utterance": "Of those ids , which correspond to those who own cats as pets ?",
            "sql": "select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "List all the other ids .",
            "sql": "select stuid from student except select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the first name of every student who has a dog but does not have a cat?",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    "interaction": [
        {
            "utterance": "Which students have dogs ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "Of those , who does not own a cat ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value except select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "What are their first names and ages ?",
            "sql": "select t1 . fname , t1 . age from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value except select t1 . fname , t1 . age from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What type of pet is the youngest animal, and how much does it weigh?",
        "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who is the youngest pet ?",
            "sql": "select * from pets order by pet_age limit value"
        },
        {
            "utterance": "What type are they ?",
            "sql": "select pettype from pets order by pet_age limit value"
        },
        {
            "utterance": "Also , how much do they weigh ?",
            "sql": "select pettype , weight from pets order by pet_age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the id and weight of every pet who is older than 1?",
        "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    "interaction": [
        {
            "utterance": "What are ids of every pet ?",
            "sql": "select petid from pets"
        },
        {
            "utterance": "For those , which refer to pets older than 1 ?",
            "sql": "select petid from pets where pet_age > value"
        },
        {
            "utterance": "Also , how much do they weigh ?",
            "sql": "select petid , weight from pets where pet_age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the average and maximum age for each pet type?",
        "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    "interaction": [
        {
            "utterance": "What are the different pet types ?",
            "sql": "select distinct pettype from pets"
        },
        {
            "utterance": "For each of those , what is the maximum age ?",
            "sql": "select max ( pet_age ) , pettype from pets group by pettype"
        },
        {
            "utterance": "What about the average age ?",
            "sql": "select avg ( pet_age ) , pettype from pets group by pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the average weight for each type of pet?",
        "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    "interaction": [
        {
            "utterance": "What information is there on pets ?",
            "sql": "select * from pets"
        },
        {
            "utterance": "For each pet type , what is the average weight ?",
            "sql": "select avg ( weight ) , pettype from pets group by pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the different first names and ages of the students who do have pets?",
        "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    "interaction": [
        {
            "utterance": "Which students have pets ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid"
        },
        {
            "utterance": "What are the different first names ?",
            "sql": "select distinct t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid"
        },
        {
            "utterance": "Also , what are their ages ?",
            "sql": "select distinct t1 . fname , t1 . age from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    "interaction": [
        {
            "utterance": "Which students have pets ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid"
        },
        {
            "utterance": "Of those , whose last name is smith ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid where t1 . lname = value"
        },
        {
            "utterance": "What is their pet 's id ?",
            "sql": "select t2 . petid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid where t1 . lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 17,
    "final": {
        "utterance": "For students who have pets, how many pets does each student have?",
        "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    "interaction": [
        {
            "utterance": "Which of the students have pets ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid"
        },
        {
            "utterance": "How many pets does each of them have ?",
            "sql": "select count ( * ) , t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid group by t1 . stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the first name and gender of the all the students who have more than one pet?",
        "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the first name and sex of each student ?",
            "sql": "select t1 . fname , t1 . sex from student as t1"
        },
        {
            "utterance": "Which of those belong to somebody who has more than one pet ?",
            "sql": "select t1 . fname , t1 . sex from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid group by t1 . stuid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the last name of the student who has a cat that is 3 years old?",
        "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    "interaction": [
        {
            "utterance": "What is the id of the three-year old cat ?",
            "sql": "select petid from pets where pet_age = value and pettype = value"
        },
        {
            "utterance": "Who is the owner of that cat ?",
            "sql": "select * from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pet_age = value and t3 . pettype = value"
        },
        {
            "utterance": "What is their last name ?",
            "sql": "select t1 . lname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pet_age = value and t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the average age for all students who do not own any pets?",
        "sql": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)"
    },
    "interaction": [
        {
            "utterance": "Which students do not own any pets ?",
            "sql": "select * from student where stuid not in ( select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid )"
        },
        {
            "utterance": "What is their average age ?",
            "sql": "select avg ( age ) from student where stuid not in ( select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 0,
    "final": {
        "utterance": "How many teachers are there?",
        "sql": "SELECT count(*) FROM teacher"
    },
    "interaction": [
        {
            "utterance": "Show all the teachers .",
            "sql": "select * from teacher"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from teacher"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names of teachers in ascending order of age.",
        "sql": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    "interaction": [
        {
            "utterance": "What is the name of each teacher ?",
            "sql": "select name from teacher"
        },
        {
            "utterance": "Sort them in ascending order of age .",
            "sql": "select name from teacher order by age asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the age and hometown of teachers?",
        "sql": "SELECT Age ,  Hometown FROM teacher"
    },
    "interaction": [
        {
            "utterance": "What is the age of each teacher ?",
            "sql": "select hometown from teacher"
        },
        {
            "utterance": "Also show the hometown for each .",
            "sql": "select age , hometown from teacher"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 3,
    "final": {
        "utterance": "List the name of teachers whose hometown is not \"Little Lever Urban District\".",
        "sql": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\""
    },
    "interaction": [
        {
            "utterance": "What is the hometown of each teacher ?",
            "sql": "select hometown from teacher"
        },
        {
            "utterance": "Which teacher 's hometown is not `` Little Lever Urban District '' ?",
            "sql": "select * from teacher where hometown ! = value"
        },
        {
            "utterance": "Give me their names .",
            "sql": "select name from teacher where hometown ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name of teachers aged either 32 or 33?",
        "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    "interaction": [
        {
            "utterance": "What are the ages of all the teachers ?",
            "sql": "select age from teacher"
        },
        {
            "utterance": "Which teachers are age 32 ?",
            "sql": "select * from teacher where age = value"
        },
        {
            "utterance": "Which teachers are age 32 or 33 ?",
            "sql": "select * from teacher where age = value or age = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from teacher where age = value or age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the hometown of the youngest teacher?",
        "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Sort all the teachers by their age .",
            "sql": "select * from teacher order by age"
        },
        {
            "utterance": "Which teacher is the youngest ?",
            "sql": "select * from teacher order by age asc limit value"
        },
        {
            "utterance": "What is his or her hometown ?",
            "sql": "select hometown from teacher order by age asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 6,
    "final": {
        "utterance": "Show different hometown of teachers and the number of teachers from each hometown.",
        "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    "interaction": [
        {
            "utterance": "What is the hometown of each teacher ?",
            "sql": "select hometown from teacher"
        },
        {
            "utterance": "Can you order teachers by their hometowns ?",
            "sql": "select * from teacher order by hometown"
        },
        {
            "utterance": "Show the number of teachers from each hometown .",
            "sql": "select hometown , count ( * ) from teacher group by hometown"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 7,
    "final": {
        "utterance": "List the most common hometown of teachers.",
        "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( * ) from teacher"
        },
        {
            "utterance": "How many are there for each hometown ?",
            "sql": "select count ( * ) from teacher group by hometown"
        },
        {
            "utterance": "Find the most common hometown of teachers .",
            "sql": "select hometown from teacher group by hometown order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the hometowns shared by at least two teachers.",
        "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( * ) from teacher"
        },
        {
            "utterance": "How many teachers are there for each hometown ?",
            "sql": "select count ( * ) from teacher group by hometown"
        },
        {
            "utterance": "Which hometowns are shared by at least two teachers ?",
            "sql": "select hometown from teacher group by hometown having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 9,
    "final": {
        "utterance": "Show names of teachers and the courses they are arranged to teach.",
        "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    "interaction": [
        {
            "utterance": "Find all the course arrangements .",
            "sql": "select * from course_arrange"
        },
        {
            "utterance": "For each of the courses , show the teacher who teaches it .",
            "sql": "select t3 . name , t2 . course from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 10,
    "final": {
        "utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    "interaction": [
        {
            "utterance": "Find all the course arrangements .",
            "sql": "select * from course_arrange"
        },
        {
            "utterance": "Show names of teachers and the courses they are arranged to teach .",
            "sql": "select t3 . name , t2 . course from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id"
        },
        {
            "utterance": "Sort the results by teacher 's name",
            "sql": "select t3 . name , t2 . course from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id order by t3 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the name of the teacher for the math course.",
        "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    "interaction": [
        {
            "utterance": "Find all the course arrangements .",
            "sql": "select * from course_arrange"
        },
        {
            "utterance": "Show names of teachers and the courses they are arranged to teach .",
            "sql": "select t3 . name , t2 . course from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id"
        },
        {
            "utterance": "Which teachers teach the math course ? Give me their names .",
            "sql": "select t3 . name from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id where t2 . course = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 12,
    "final": {
        "utterance": "Show names of teachers and the number of courses they teach.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "Show all the teacher names .",
            "sql": "select name from teacher"
        },
        {
            "utterance": "Show names of teachers and the number of courses they teach .",
            "sql": "select t2 . name , count ( * ) from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id group by t2 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 13,
    "final": {
        "utterance": "Show names of teachers that teach at least two courses.",
        "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show all the teacher names .",
            "sql": "select name from teacher"
        },
        {
            "utterance": "Show names of teachers and the number of courses they teach .",
            "sql": "select t2 . name , count ( * ) from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id group by t2 . name"
        },
        {
            "utterance": "Show the names of teachers who teach at least two courses .",
            "sql": "select t2 . name from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id group by t2 . name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the average age of losers and winners of all matches.",
        "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    "interaction": [
        {
            "utterance": "How many matches are there ?",
            "sql": "select count ( * ) from matches"
        },
        {
            "utterance": "What was the maximum length in minutes for the matches ?",
            "sql": "select max ( minutes ) from matches"
        },
        {
            "utterance": "Average ?",
            "sql": "select avg ( minutes ) from matches"
        },
        {
            "utterance": "How about for the age of losers and winners ?",
            "sql": "select avg ( loser_age ) , avg ( winner_age ) from matches"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of tourney that has more than 10 matches.",
        "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    "interaction": [
        {
            "utterance": "How many distinct tourney names are there ?",
            "sql": "select count ( distinct tourney_name ) from matches"
        },
        {
            "utterance": "Which ones have more than 20 matches ?",
            "sql": "select tourney_name from matches group by tourney_name having count ( * ) > value"
        },
        {
            "utterance": "More than 10 ?",
            "sql": "select tourney_name from matches group by tourney_name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of all winners who played in both 2013 and 2016.",
        "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    "interaction": [
        {
            "utterance": "How many distinct winners played in 2013 ?",
            "sql": "select count ( distinct winner_name ) from matches where year = value"
        },
        {
            "utterance": "Of those , how many also played in 2016 .",
            "sql": "select count ( * ) from ( select winner_name from matches where year = value intersect select winner_name from matches where year = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select winner_name from matches where year = value intersect select winner_name from matches where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 3,
    "final": {
        "utterance": "List the number of all matches who played in years of 2013 or 2016.",
        "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    "interaction": [
        {
            "utterance": "How many matches were played ?",
            "sql": "select count ( * ) from matches"
        },
        {
            "utterance": "How many where the loser hand is L ?",
            "sql": "select count ( * ) from matches where loser_hand = value"
        },
        {
            "utterance": "How many played in year 2013 or 2016 ?",
            "sql": "select count ( * ) from matches where year = value or year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    "interaction": [
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( * ) from players"
        },
        {
            "utterance": "Which ones won in the tourney WTA Championships ? Give their last name and birth date .",
            "sql": "select t1 . last_name , t1 . birth_date from players as t1 join matches as t2 on t1 . player_id = t2 . winner_id where t2 . tourney_name = value"
        },
        {
            "utterance": "Give first name and country code instead .",
            "sql": "select t1 . country_code , t1 . first_name from players as t1 join matches as t2 on t1 . player_id = t2 . winner_id where t2 . tourney_name = value"
        },
        {
            "utterance": "Which ones also won in the Australian Open ?",
            "sql": "select t1 . country_code , t1 . first_name from players as t1 join matches as t2 on t1 . player_id = t2 . winner_id where t2 . tourney_name = value intersect select t1 . country_code , t1 . first_name from players as t1 join matches as t2 on t1 . player_id = t2 . winner_id where t2 . tourney_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the first name and country code of the oldest player.",
        "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the birth date of the oldest player ?",
            "sql": "select birth_date from players order by birth_date desc limit value"
        },
        {
            "utterance": "Give the player id and last name instead .",
            "sql": "select player_id , last_name from players order by birth_date limit value"
        },
        {
            "utterance": "Give the first name and country code instead .",
            "sql": "select first_name , country_code from players order by birth_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 6,
    "final": {
        "utterance": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    "interaction": [
        {
            "utterance": "How many players have right / R hand ?",
            "sql": "select count ( * ) from players where hand = value"
        },
        {
            "utterance": "Left / L hand ?",
            "sql": "select count ( * ) from players where hand = value"
        },
        {
            "utterance": "Give their country code and birth date .",
            "sql": "select country_code , birth_date from players where hand = value"
        },
        {
            "utterance": "Order by their birth date , and give the first and last name instead .",
            "sql": "select first_name , last_name from players where hand = value order by birth_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the first name and country code of the player who did the most number of tours.",
        "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( * ) from players"
        },
        {
            "utterance": "How many tours did the player who did the least number of tours do ?",
            "sql": "select t2 . tours from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id order by t2 . tours asc limit value"
        },
        {
            "utterance": "Most number of tours ?",
            "sql": "select t2 . tours from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id order by t2 . tours desc limit value"
        },
        {
            "utterance": "Give the first name and country code instead .",
            "sql": "select t1 . country_code , t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id order by t2 . tours desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the year that has the most number of matches.",
        "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many matches are there ?",
            "sql": "select count ( * ) from matches"
        },
        {
            "utterance": "Find the surface that has the most number .",
            "sql": "select surface from matches group by surface order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the year ?",
            "sql": "select year from matches group by year order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and rank points of the winner who won the most times.",
        "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of the loser who lost the most times .",
            "sql": "select loser_name from matches group by loser_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Give the rank points as well .",
            "sql": "select loser_name , loser_rank_points from matches group by loser_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Give the same , but for the winner who won the most times .",
            "sql": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give the name of the loser who has the highest rank points .",
            "sql": "select loser_name from matches order by loser_rank_points desc limit value"
        },
        {
            "utterance": "Do the same but for the Australian Open tourney .",
            "sql": "select loser_name from matches where tourney_name = value order by loser_rank_points desc limit value"
        },
        {
            "utterance": "Give the winner name instead .",
            "sql": "select winner_name from matches where tourney_name = value order by winner_rank_points desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 11,
    "final": {
        "utterance": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give the length of the match in minutes of the shortest match .",
            "sql": "select minutes from matches order by minutes asc limit value"
        },
        {
            "utterance": "Longest match ?",
            "sql": "select minutes from matches order by minutes desc limit value"
        },
        {
            "utterance": "Give the winner and loser name instead .",
            "sql": "select winner_name , loser_name from matches order by minutes desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the average ranking for each player and their first name.",
        "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    "interaction": [
        {
            "utterance": "Find the birth dates of each of the players .",
            "sql": "select birth_date from players"
        },
        {
            "utterance": "Find tours and first name instead .",
            "sql": "select t2 . tours , t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . first_name"
        },
        {
            "utterance": "Give the average ranking instead of the tours .",
            "sql": "select avg ( ranking ) , t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the total ranking points for each player and their first name.",
        "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    "interaction": [
        {
            "utterance": "Give the number of tours for each player .",
            "sql": "select tours from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . first_name"
        },
        {
            "utterance": "Give the average rank points and first name .",
            "sql": "select avg ( ranking ) , t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . first_name"
        },
        {
            "utterance": "Find the total ranking points instead .",
            "sql": "select sum ( ranking_points ) , t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 14,
    "final": {
        "utterance": "find the code of the country where has the greatest number of players.",
        "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the number of players for each country .",
            "sql": "select count ( * ) from players group by country_code"
        },
        {
            "utterance": "Which country has the least number of players ? Give the country code .",
            "sql": "select country_code from players group by country_code order by count ( * ) asc limit value"
        },
        {
            "utterance": "Greatest number ?",
            "sql": "select country_code from players group by country_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the codes of countries that have more than 50 players.",
        "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    "interaction": [
        {
            "utterance": "What is the number of players for each hand type ? Give the hand type as well .",
            "sql": "select count ( * ) , hand from players group by hand"
        },
        {
            "utterance": "For each country ?",
            "sql": "select count ( * ) , country_code from players group by country_code"
        },
        {
            "utterance": "Give the ones that have more than 50 players .",
            "sql": "select count ( * ) , country_code from players group by country_code having count ( * ) > value"
        },
        {
            "utterance": "Give the country code only .",
            "sql": "select country_code from players group by country_code having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name and rank of the 3 youngest winners across all matches.",
        "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Give the name of the 3 oldest losers across all matches .",
            "sql": "select distinct loser_name from matches order by loser_age desc limit value"
        },
        {
            "utterance": "How about the 3 oldest winners .",
            "sql": "select distinct winner_name from matches order by winner_age desc limit value"
        },
        {
            "utterance": "Youngest ? Give the rank as well .",
            "sql": "select distinct winner_name , winner_rank from matches order by winner_age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many different winners both participated in the WTA Championships and were left handed?",
        "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    "interaction": [
        {
            "utterance": "How many different losers participated in the Australian Open ?",
            "sql": "select count ( distinct loser_name ) from matches where tourney_name = value"
        },
        {
            "utterance": "Winners ?",
            "sql": "select count ( distinct winner_name ) from matches where tourney_name = value"
        },
        {
            "utterance": "How about in the WTA Championships , and were also left handed ?",
            "sql": "select count ( distinct winner_name ) from matches where tourney_name = value and winner_hand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 0,
    "final": {
        "utterance": "How many conductors are there?",
        "sql": "SELECT count(*) FROM conductor"
    },
    "interaction": [
        {
            "utterance": "List all conductor information .",
            "sql": "select * from conductor"
        },
        {
            "utterance": "How many conductors are there ?",
            "sql": "select count ( * ) from conductor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names of conductors in ascending order of age.",
        "sql": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    "interaction": [
        {
            "utterance": "What are the names of the conductors ?",
            "sql": "select name from conductor"
        },
        {
            "utterance": "What are the ages of the conductors ?",
            "sql": "select age from conductor"
        },
        {
            "utterance": "List the names of conductors in ascending order of age .",
            "sql": "select name from conductor order by age asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the names of conductors whose nationalities are not \"USA\"?",
        "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    "interaction": [
        {
            "utterance": "List the names of conductors",
            "sql": "select name from conductor"
        },
        {
            "utterance": "Among these conductors , which of them are not from the USA ?",
            "sql": "select name from conductor where nationality ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    "interaction": [
        {
            "utterance": "List the information of record companies .",
            "sql": "select record_company from orchestra"
        },
        {
            "utterance": "When were they founded ?",
            "sql": "select record_company , year_of_founded from orchestra"
        },
        {
            "utterance": "Please list the record companies of orchestras in descending order of years in which they were founded .",
            "sql": "select record_company from orchestra order by year_of_founded desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average attendance of shows?",
        "sql": "SELECT avg(Attendance) FROM SHOW"
    },
    "interaction": [
        {
            "utterance": "What is the attendance of each show ?",
            "sql": "select attendance from show"
        },
        {
            "utterance": "What is the average attendance ?",
            "sql": "select avg ( attendance ) from show"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    "interaction": [
        {
            "utterance": "What are the shares of performances ?",
            "sql": "select share from performance"
        },
        {
            "utterance": "What are the shares of performances whose type is not `` Live final '' ?",
            "sql": "select share from performance where type ! = value"
        },
        {
            "utterance": "What are the maximum and the minimum of these values ?",
            "sql": "select max ( share ) , min ( share ) from performance where type ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 6,
    "final": {
        "utterance": "How many different nationalities do conductors have?",
        "sql": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    "interaction": [
        {
            "utterance": "List the nationalities of conductors .",
            "sql": "select nationality from conductor"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct nationality ) from conductor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 7,
    "final": {
        "utterance": "List names of conductors in descending order of years of work.",
        "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    "interaction": [
        {
            "utterance": "List the names of conductors .",
            "sql": "select name from conductor"
        },
        {
            "utterance": "List years of work of conductors .",
            "sql": "select year_of_work from conductor"
        },
        {
            "utterance": "List names of conductors in descending order of years of work .",
            "sql": "select name from conductor order by year_of_work desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 8,
    "final": {
        "utterance": "List the name of the conductor with the most years of work.",
        "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the names of the conductors .",
            "sql": "select name from conductor"
        },
        {
            "utterance": "List years of work of conductors .",
            "sql": "select year_of_work from conductor"
        },
        {
            "utterance": "List the name of the conductor with the most years of work .",
            "sql": "select name from conductor order by year_of_work desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of conductors and the orchestras they have conducted.",
        "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    "interaction": [
        {
            "utterance": "Show the names of conductors .",
            "sql": "select name from conductor"
        },
        {
            "utterance": "Please list these names with the orchestras they have conducted .",
            "sql": "select t1 . name , t2 . orchestra from conductor as t1 join orchestra as t2 on t1 . conductor_id = t2 . conductor_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of conductors that have conducted more than one orchestras.",
        "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Please show the names of the conductors .",
            "sql": "select name from conductor"
        },
        {
            "utterance": "Which of them have conducted more than one orchestras ?",
            "sql": "select t1 . name from conductor as t1 join orchestra as t2 on t1 . conductor_id = t2 . conductor_id group by t2 . conductor_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Please show the names of the conductors .",
            "sql": "select name from conductor"
        },
        {
            "utterance": "Who has conducted the most orchestras ?",
            "sql": "select t1 . name from conductor as t1 join orchestra as t2 on t1 . conductor_id = t2 . conductor_id group by t2 . conductor_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 12,
    "final": {
        "utterance": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    "interaction": [
        {
            "utterance": "Please show the names of the conductors .",
            "sql": "select name from conductor"
        },
        {
            "utterance": "Who has conducted orchestras founded after 2008 ?",
            "sql": "select t1 . name from conductor as t1 join orchestra as t2 on t1 . conductor_id = t2 . conductor_id where year_of_founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 13,
    "final": {
        "utterance": "Please show the different record companies and the corresponding number of orchestras.",
        "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    "interaction": [
        {
            "utterance": "Please show the record companies without duplicates .",
            "sql": "select record_company from orchestra group by record_company"
        },
        {
            "utterance": "Please also show their corresponding number of orchestras .",
            "sql": "select record_company , count ( * ) from orchestra group by record_company"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 14,
    "final": {
        "utterance": "Please show the record formats of orchestras in ascending order of count.",
        "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    "interaction": [
        {
            "utterance": "Please show the record formats of orchestras .",
            "sql": "select major_record_format from orchestra"
        },
        {
            "utterance": "Please list them in ascending order of count .",
            "sql": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 15,
    "final": {
        "utterance": "List the record company shared by the most number of orchestras.",
        "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the information of all record companies .",
            "sql": "select record_company from orchestra"
        },
        {
            "utterance": "Which one is shared by the most orchestras ?",
            "sql": "select record_company from orchestra group by record_company order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 16,
    "final": {
        "utterance": "List the names of orchestras that have no performance.",
        "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    "interaction": [
        {
            "utterance": "List the names of orchestras .",
            "sql": "select orchestra from orchestra"
        },
        {
            "utterance": "Which of them have had no performances ?",
            "sql": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    "interaction": [
        {
            "utterance": "Please list the record companies .",
            "sql": "select record_company from orchestra"
        },
        {
            "utterance": "Which of them are shared by orchestras founded before 2003 ?",
            "sql": "select record_company from orchestra where year_of_founded < value"
        },
        {
            "utterance": "Which of them are shared by orchestras founded after 2003 ?",
            "sql": "select record_company from orchestra where year_of_founded > value"
        },
        {
            "utterance": "Which of them are shared by orchestras founded before 2003 and after 2003 ?",
            "sql": "select record_company from orchestra where year_of_founded < value intersect select record_company from orchestra where year_of_founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    "interaction": [
        {
            "utterance": "List the orchestras whose record format is `` CD '' or `` DVD '' .",
            "sql": "select * from orchestra where major_record_format = value or major_record_format = value"
        },
        {
            "utterance": "How many of these orchestras are there ?",
            "sql": "select count ( * ) from orchestra where major_record_format = value or major_record_format = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 0,
    "final": {
        "utterance": "What country is Jetblue Airways affiliated with?",
        "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    "interaction": [
        {
            "utterance": "What are all the airlines ?",
            "sql": "select * from airlines"
        },
        {
            "utterance": "Of these , which is Jetblue Airways ?",
            "sql": "select * from airlines where airline = value"
        },
        {
            "utterance": "What is the country corresponding it ?",
            "sql": "select country from airlines where airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Which abbreviation corresponds to Jetblue Airways?",
        "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    "interaction": [
        {
            "utterance": "What are all the abbreviations ?",
            "sql": "select abbreviation from airlines"
        },
        {
            "utterance": "What is the abbreviation for Jetblue Airways ?",
            "sql": "select abbreviation from airlines where airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the airline names and abbreviations for airlines in the USA?",
        "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    "interaction": [
        {
            "utterance": "List all airline names and their abbreviations .",
            "sql": "select airline , abbreviation from airlines"
        },
        {
            "utterance": "Of these , list only those in the USA .",
            "sql": "select airline , abbreviation from airlines where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Give the airport code and airport name corresonding to the city Anthony.",
        "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    "interaction": [
        {
            "utterance": "Find all information about the airport in the city Anthony .",
            "sql": "select * from airports where city = value"
        },
        {
            "utterance": "What is the airport code and airport name ?",
            "sql": "select airportcode , airportname from airports where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the total number of airlines?",
        "sql": "SELECT count(*) FROM AIRLINES"
    },
    "interaction": [
        {
            "utterance": "What are all the airlines ?",
            "sql": "select * from airlines"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from airlines"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Return the number of  airports.",
        "sql": "SELECT count(*) FROM AIRPORTS"
    },
    "interaction": [
        {
            "utterance": "What are all the airports ?",
            "sql": "select * from airports"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from airports"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Return the number of flights.",
        "sql": "SELECT count(*) FROM FLIGHTS"
    },
    "interaction": [
        {
            "utterance": "What are all the flights ?",
            "sql": "select * from flights"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Give the airline with abbreviation 'UAL'.",
        "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    "interaction": [
        {
            "utterance": "What are all the airline names ?",
            "sql": "select airline from airlines"
        },
        {
            "utterance": "Of this , which has the abbreviation 'UAL ' ?",
            "sql": "select airline from airlines where abbreviation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 8,
    "final": {
        "utterance": "Return the number of airlines in the USA.",
        "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the airlines in the USA ?",
            "sql": "select airline from airlines where country = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from airlines where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Give the city and country for the Alton airport.",
        "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    "interaction": [
        {
            "utterance": "What are the city and country for all airports ?",
            "sql": "select city , country from airports"
        },
        {
            "utterance": "Of these , what are the city and country for Alton airport ?",
            "sql": "select city , country from airports where airportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Return the name of the airport with code 'AKO'.",
        "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    "interaction": [
        {
            "utterance": "What are all the airport names ?",
            "sql": "select airportname from airports"
        },
        {
            "utterance": "Of these , which has code 'AKO ' ?",
            "sql": "select airportname from airports where airportcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the names of airports in Aberdeen?",
        "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "What are all the airport names ?",
            "sql": "select airportname from airports"
        },
        {
            "utterance": "Which is in Aberdeen ?",
            "sql": "select airportname from airports where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Count the number of flights departing from 'APG'.",
        "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    "interaction": [
        {
            "utterance": "What are all the flights departing from 'APG ' ?",
            "sql": "select * from flights where sourceairport = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights where sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Count the number of flights into ATO.",
        "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    "interaction": [
        {
            "utterance": "What flights land in ATO ?",
            "sql": "select * from flights where destairport = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights where destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Return the number of flights departing from Aberdeen.",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "What are all the flights derparting from Aberdeen ?",
            "sql": "select * from flights as t1 join airports as t2 on t1 . sourceairport = t2 . airportcode where t2 . city = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . sourceairport = t2 . airportcode where t2 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Return the number of flights arriving in Aberdeen.",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "What are all the flights arriving in Aberdeen .",
            "sql": "select * from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 16,
    "final": {
        "utterance": "How many flights fly from Aberdeen to Ashley?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "What are all the flights that leave from Aberdeen ?",
            "sql": "select * from flights as t1 join airports as t2 on t1 . sourceairport = t2 . airportcode where t2 . city = value"
        },
        {
            "utterance": "Of those , which land in Ashley ?",
            "sql": "select * from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode join airports as t3 on t1 . sourceairport = t3 . airportcode where t2 . city = value and t3 . city = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode join airports as t3 on t1 . sourceairport = t3 . airportcode where t2 . city = value and t3 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 17,
    "final": {
        "utterance": "Give the number of Jetblue Airways flights.",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    "interaction": [
        {
            "utterance": "What are all the flights on Jetblue Airways ?",
            "sql": "select * from flights as t1 join airlines as t2 on t1 . airline = t2 . uid where t2 . airline = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights as t1 join airlines as t2 on t1 . airline = t2 . uid where t2 . airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 18,
    "final": {
        "utterance": "Count the number of United Airlines flights arriving in ASY Airport.",
        "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    "interaction": [
        {
            "utterance": "What are the United Airlines flights ?",
            "sql": "select * from airlines where airline = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from airlines where airline = value"
        },
        {
            "utterance": "How many land in ASY Airport ?",
            "sql": "select count ( * ) from airlines as t1 join flights as t2 on t2 . airline = t1 . uid where t1 . airline = value and t2 . destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Return the number of United Airlines flights leaving from AHD Airport.",
        "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    "interaction": [
        {
            "utterance": "What are the United Airlines flights ?",
            "sql": "select * from airlines where airline = value"
        },
        {
            "utterance": "Which ones leave from AHD ?",
            "sql": "select * from airlines as t1 join flights as t2 on t2 . airline = t1 . uid where t1 . airline = value and t2 . sourceairport = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from airlines as t1 join flights as t2 on t2 . airline = t1 . uid where t1 . airline = value and t2 . sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    "interaction": [
        {
            "utterance": "Which United Airlines flights fly into Aberdeen ?",
            "sql": "select * from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode join airlines as t3 on t3 . uid = t1 . airline where t2 . city = value and t3 . airline = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode join airlines as t3 on t3 . uid = t1 . airline where t2 . city = value and t3 . airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Which city has the most frequent destination airport?",
        "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Name all cities that have destination airports .",
            "sql": "select t1 . city from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport"
        },
        {
            "utterance": "Order them by number of arriving flights .",
            "sql": "select t1 . city from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport group by t1 . city order by count ( * ) desc"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select t1 . city from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport group by t1 . city order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Which city is the most frequent source airport?",
        "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Name all cities that have source airports .",
            "sql": "select t1 . city from airports as t1 join flights as t2 on t1 . airportcode = t2 . sourceairport"
        },
        {
            "utterance": "Order them by number of departing flights .",
            "sql": "select t1 . city from airports as t1 join flights as t2 on t1 . airportcode = t2 . sourceairport group by t1 . city order by count ( * ) desc"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select t1 . city from airports as t1 join flights as t2 on t1 . airportcode = t2 . sourceairport group by t1 . city order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the airport code of the airport with the most flights?",
        "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are airport codes of any airport with a arriving flight ?",
            "sql": "select t1 . airportcode from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport"
        },
        {
            "utterance": "Also include codes of airports with departure flights .",
            "sql": "select t1 . airportcode from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport or t1 . airportcode = t2 . sourceairport"
        },
        {
            "utterance": "Which one has the highest number of flights ?",
            "sql": "select t1 . airportcode from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport or t1 . airportcode = t2 . sourceairport group by t1 . airportcode order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 24,
    "final": {
        "utterance": "Give the code of the airport with the least flights.",
        "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are airport codes of any airport with a arriving flight ?",
            "sql": "select t1 . airportcode from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport"
        },
        {
            "utterance": "Also include codes of airports with departure flights .",
            "sql": "select t1 . airportcode from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport or t1 . airportcode = t2 . sourceairport"
        },
        {
            "utterance": "Which one has the least number of flights ?",
            "sql": "select t1 . airportcode from airports as t1 join flights as t2 on t1 . airportcode = t2 . destairport or t1 . airportcode = t2 . sourceairport group by t1 . airportcode order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 25,
    "final": {
        "utterance": "What airline serves the most flights?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of flights by airline .",
            "sql": "select count ( * ) , t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline"
        },
        {
            "utterance": "Which airline has the most ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the airline abbreviations and what countries are they in ?",
            "sql": "select abbreviation , country from airlines"
        },
        {
            "utterance": "Order them by the number of flights that they have .",
            "sql": "select t1 . abbreviation , t1 . country from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline order by count ( * )"
        },
        {
            "utterance": "Which one has the fewest ?",
            "sql": "select t1 . abbreviation , t1 . country from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Which airlines have a flight with source airport AHD?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    "interaction": [
        {
            "utterance": "Which flights leave from AHD ?",
            "sql": "select * from flights where sourceairport = value"
        },
        {
            "utterance": "What are their airlines ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 28,
    "final": {
        "utterance": "Which airlines have a flight with destination airport AHD?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    "interaction": [
        {
            "utterance": "Which flights arrive in AHD ?",
            "sql": "select * from flights where destairport = value"
        },
        {
            "utterance": "What are their airlines ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Which airlines have departing flights from both APG and CVO airports?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    "interaction": [
        {
            "utterance": "Which airlines have flights departing from APG ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value"
        },
        {
            "utterance": "Of those , which also have flights from CVO ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value intersect select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Which airlines have departures from CVO but not from APG airports?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    "interaction": [
        {
            "utterance": "Which airlines have flights from CVO ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value"
        },
        {
            "utterance": "Of these , which do not have flights from APG ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value except select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 31,
    "final": {
        "utterance": "Which airlines have at least 10 flights?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    "interaction": [
        {
            "utterance": "What are all the airlines ?",
            "sql": "select distinct airline from airlines"
        },
        {
            "utterance": "Which ones have more than 10 flights ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 32,
    "final": {
        "utterance": "Which airlines have less than 200 flights?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    "interaction": [
        {
            "utterance": "What are all the airlines ?",
            "sql": "select distinct airline from airlines"
        },
        {
            "utterance": "Which ones have less than 200 flights ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 33,
    "final": {
        "utterance": "Which flight numbers correspond to United Airlines flights?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    "interaction": [
        {
            "utterance": "What are all the flight numbers ?",
            "sql": "select flightno from flights"
        },
        {
            "utterance": "Which belong to United Airlines ?",
            "sql": "select t1 . flightno from flights as t1 join airlines as t2 on t2 . uid = t1 . airline where t2 . airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 34,
    "final": {
        "utterance": "Give the flight numbers of flights leaving from APG.",
        "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    "interaction": [
        {
            "utterance": "What are all the flight numbers ?",
            "sql": "select flightno from flights"
        },
        {
            "utterance": "Of these , which correspond to flights leaving from APG ?",
            "sql": "select flightno from flights where sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 35,
    "final": {
        "utterance": "Give the flight numbers of flights landing at APG.",
        "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    "interaction": [
        {
            "utterance": "What are all the flight numbers ?",
            "sql": "select flightno from flights"
        },
        {
            "utterance": "Also , which numbers are for flights that land in APG ?",
            "sql": "select flightno from flights where destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 36,
    "final": {
        "utterance": "Give the flight numbers of flights leaving from Aberdeen.",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "What are all the flight numbers ?",
            "sql": "select flightno from flights"
        },
        {
            "utterance": "Of these , which are departure flights ?",
            "sql": "select t1 . flightno from flights as t1 join airports as t2 on t1 . sourceairport = t2 . airportcode"
        },
        {
            "utterance": "Which leave from Aberdeen ?",
            "sql": "select t1 . flightno from flights as t1 join airports as t2 on t1 . sourceairport = t2 . airportcode where t2 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 37,
    "final": {
        "utterance": "Give the flight numbers of flights arriving in Aberdeen.",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "What are all the flight numbers ?",
            "sql": "select flightno from flights"
        },
        {
            "utterance": "Of these , which are arrival flights ?",
            "sql": "select t1 . flightno from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode"
        },
        {
            "utterance": "Which land in Aberdeen ?",
            "sql": "select t1 . flightno from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 38,
    "final": {
        "utterance": "How many flights land in Aberdeen or Abilene?",
        "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    "interaction": [
        {
            "utterance": "What flights land in Aberdeen ?",
            "sql": "select * from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value"
        },
        {
            "utterance": "Also include flights that land in Abilene .",
            "sql": "select * from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value or t2 . city = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value or t2 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 39,
    "final": {
        "utterance": "Which airports do not have departing or arriving flights?",
        "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    "interaction": [
        {
            "utterance": "What are the source airports ?",
            "sql": "select sourceairport from flights"
        },
        {
            "utterance": "Also include the destination airports .",
            "sql": "select sourceairport from flights union select destairport from flights"
        },
        {
            "utterance": "Which airports are not included ?",
            "sql": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 0,
    "final": {
        "utterance": "How many singers do we have?",
        "sql": "SELECT count(*) FROM singer"
    },
    "interaction": [
        {
            "utterance": "Show information for all singers .",
            "sql": "select * from singer"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from singer"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 1,
    "final": {
        "utterance": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    "interaction": [
        {
            "utterance": "Show names of all singers .",
            "sql": "select name from singer"
        },
        {
            "utterance": "For each of them , also show country and age .",
            "sql": "select name , country , age from singer"
        },
        {
            "utterance": "List the results in descending order of their age .",
            "sql": "select name , country , age from singer order by age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the average, minimum, and maximum age of all singers from France?",
        "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    "interaction": [
        {
            "utterance": "Show age for all singers .",
            "sql": "select age from singer"
        },
        {
            "utterance": "What about age for those from France ?",
            "sql": "select age from singer where country = value"
        },
        {
            "utterance": "What is the average , minimum , and maximum age for those ?",
            "sql": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name and the release year of the song by the youngest singer.",
        "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the names of all songs .",
            "sql": "select song_name from singer"
        },
        {
            "utterance": "Also show the release year for each of them .",
            "sql": "select song_name , song_release_year from singer"
        },
        {
            "utterance": "Order the result by the age of their singers .",
            "sql": "select song_name , song_release_year from singer order by age"
        },
        {
            "utterance": "What is the result for the song by the yongest ?",
            "sql": "select song_name , song_release_year from singer order by age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 4,
    "final": {
        "utterance": "What are all distinct countries where singers above age 20 are from?",
        "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    "interaction": [
        {
            "utterance": "Show country for all singers .",
            "sql": "select country from singer"
        },
        {
            "utterance": "Only show the results for those above 20 .",
            "sql": "select country from singer where age > value"
        },
        {
            "utterance": "What are all distinct countries for them ?",
            "sql": "select distinct country from singer where age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all countries and the number of singers in each country.",
        "sql": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    "interaction": [
        {
            "utterance": "Show the country for all singers .",
            "sql": "select country from singer"
        },
        {
            "utterance": "For each of them , what is the number of singers ?",
            "sql": "select country , count ( * ) from singer group by country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 6,
    "final": {
        "utterance": "List all song names by singers above the average age.",
        "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    "interaction": [
        {
            "utterance": "What is the average age for all singers ?",
            "sql": "select avg ( age ) from singer"
        },
        {
            "utterance": "Show the name for songs by singers older than that .",
            "sql": "select song_name from singer where age > ( select avg ( age ) from singer )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 7,
    "final": {
        "utterance": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    "interaction": [
        {
            "utterance": "Show the name for all stadiums .",
            "sql": "select name from stadium"
        },
        {
            "utterance": "What about those with a capacity between 5000 and 10000 ?",
            "sql": "select name from stadium where capacity between value and value"
        },
        {
            "utterance": "Also list the location for them .",
            "sql": "select location , name from stadium where capacity between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the average and the maximum capacity of all stadiums?",
        "sql": "SELECT avg(capacity) ,  max(capacity) FROM stadium"
    },
    "interaction": [
        {
            "utterance": "Show the capacity for all stadiums .",
            "sql": "select capacity from stadium"
        },
        {
            "utterance": "What is the average of them ?",
            "sql": "select avg ( capacity ) from stadium"
        },
        {
            "utterance": "Also show the maximum .",
            "sql": "select avg ( capacity ) , max ( capacity ) from stadium"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the name and capacity for the stadium with highest average attendance?",
        "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name and capacity for all stadiums .",
            "sql": "select name , capacity from stadium"
        },
        {
            "utterance": "Show the result in descending order of their average attendance .",
            "sql": "select name , capacity from stadium order by average desc"
        },
        {
            "utterance": "Which one has the highest ?",
            "sql": "select name , capacity from stadium order by average desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 10,
    "final": {
        "utterance": "How many concerts are there in year 2014 or 2015?",
        "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    "interaction": [
        {
            "utterance": "Show the concert information in year 2014 .",
            "sql": "select * from concert where year = value"
        },
        {
            "utterance": "Also show those in year 2015 .",
            "sql": "select * from concert where year = value or year = value"
        },
        {
            "utterance": "How many are there in total ?",
            "sql": "select count ( * ) from concert where year = value or year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the stadium name and the number of concerts in each stadium.",
        "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    "interaction": [
        {
            "utterance": "Show the names of stadiums .",
            "sql": "select name from stadium"
        },
        {
            "utterance": "For each of them , also show the number of concerts .",
            "sql": "select t2 . name , count ( * ) from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id group by t1 . stadium_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all stadium names and their capacities .",
            "sql": "select name , capacity from stadium"
        },
        {
            "utterance": "Order the results in descending order of the number of concerts in year 2014 or after .",
            "sql": "select t2 . name , t2 . capacity from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year > = value group by t2 . stadium_id order by count ( * ) desc"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select t2 . name , t2 . capacity from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year > = value group by t2 . stadium_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 13,
    "final": {
        "utterance": "Which year has most number of concerts?",
        "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the year for all concerts .",
            "sql": "select year from concert"
        },
        {
            "utterance": "Order them in descending order of the number of concerts",
            "sql": "select year from concert group by year order by count ( * ) desc"
        },
        {
            "utterance": "Which year has the most ?",
            "sql": "select year from concert group by year order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the stadium names without any concert.",
        "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    "interaction": [
        {
            "utterance": "Show all stadium ids of concerts .",
            "sql": "select stadium_id from concert"
        },
        {
            "utterance": "Show the stadium names without any concert .",
            "sql": "select name from stadium where stadium_id not in ( select stadium_id from concert )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 15,
    "final": {
        "utterance": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
    },
    "interaction": [
        {
            "utterance": "Show the country for all singers .",
            "sql": "select country from singer"
        },
        {
            "utterance": "How about those for singers above age 40 ?",
            "sql": "select country from singer where age > value"
        },
        {
            "utterance": "How about those for singers below 30 ?",
            "sql": "select country from singer where age < value"
        },
        {
            "utterance": "How about countries with both ?",
            "sql": "select country from singer where age > value intersect select country from singer where age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 16,
    "final": {
        "utterance": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    "interaction": [
        {
            "utterance": "Show name for stadiums that had a concert in year 2014 .",
            "sql": "select t2 . name from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value"
        },
        {
            "utterance": "Show names for all stadiums except for those .",
            "sql": "select name from stadium except select t2 . name from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the name and theme for all concerts and the number of singers in each concert.",
        "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    "interaction": [
        {
            "utterance": "Show the name and theme for all concerts .",
            "sql": "select concert_name , theme from concert"
        },
        {
            "utterance": "For each of those , also show the number of singers .",
            "sql": "select t2 . concert_name , t2 . theme , count ( * ) from singer_in_concert as t1 join concert as t2 on t1 . concert_id = t2 . concert_id group by t2 . concert_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 18,
    "final": {
        "utterance": "List singer names and number of concerts for each singer.",
        "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    "interaction": [
        {
            "utterance": "Show the name for all singers .",
            "sql": "select name from singer"
        },
        {
            "utterance": "For each of them , also show the number of concerts",
            "sql": "select t2 . name , count ( * ) from singer_in_concert as t1 join singer as t2 on t1 . singer_id = t2 . singer_id group by t2 . singer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 19,
    "final": {
        "utterance": "List all singer names in concerts in year 2014.",
        "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    "interaction": [
        {
            "utterance": "List all singer names .",
            "sql": "select name from singer"
        },
        {
            "utterance": "How about those performing concerts in year 2014 ?",
            "sql": "select t2 . name from singer_in_concert as t1 join singer as t2 on t1 . singer_id = t2 . singer_id join concert as t3 on t1 . concert_id = t3 . concert_id where t3 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 20,
    "final": {
        "utterance": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all singers ?",
            "sql": "select name from singer"
        },
        {
            "utterance": "Show the names for those having a song having 'Hey ' in its name .",
            "sql": "select name from singer where song_name like value"
        },
        {
            "utterance": "Also show the nation for those singers .",
            "sql": "select name , country from singer where song_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    "interaction": [
        {
            "utterance": "Show the name and location for the stadiums .",
            "sql": "select name , location from stadium"
        },
        {
            "utterance": "How about those with some concerts happened in the year 2014 ?",
            "sql": "select t2 . name , t2 . location from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value"
        },
        {
            "utterance": "Among those , what are stadiums also holding some concerts in the year 2015 ?",
            "sql": "select t2 . name , t2 . location from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value intersect select t2 . name , t2 . location from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many states are there?",
        "sql": "SELECT count(*) FROM area_code_state"
    },
    "interaction": [
        {
            "utterance": "Show all area codes and states .",
            "sql": "select * from area_code_state"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from area_code_state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List the contestant numbers and names, ordered by contestant name descending.",
        "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
    },
    "interaction": [
        {
            "utterance": "Show all info about contestants .",
            "sql": "select * from contestants"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select contestant_name from contestants"
        },
        {
            "utterance": "Can you also show contestant numbers ?",
            "sql": "select contestant_number , contestant_name from contestants"
        },
        {
            "utterance": "Can you sort them ordered in descending order of contestant name ?",
            "sql": "select contestant_number , contestant_name from contestants order by contestant_name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the vote ids, phone numbers and states of all votes.",
        "sql": "SELECT vote_id ,  phone_number ,  state FROM votes"
    },
    "interaction": [
        {
            "utterance": "Show all info about votes .",
            "sql": "select state from votes"
        },
        {
            "utterance": "Also provide vote ids .",
            "sql": "select vote_id , state from votes"
        },
        {
            "utterance": "Also show phone numbers .",
            "sql": "select vote_id , phone_number , state from votes"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and minimum values of area codes?",
        "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
    },
    "interaction": [
        {
            "utterance": "Show all area codes .",
            "sql": "select area_code from area_code_state"
        },
        {
            "utterance": "What is the largest one ?",
            "sql": "select max ( area_code ) from area_code_state"
        },
        {
            "utterance": "How about smallest one ?",
            "sql": "select min ( area_code ) from area_code_state"
        },
        {
            "utterance": "Give me both .",
            "sql": "select max ( area_code ) , min ( area_code ) from area_code_state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is last date created of votes from the state 'CA'?",
        "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'"
    },
    "interaction": [
        {
            "utterance": "Show all votes .",
            "sql": "select * from votes"
        },
        {
            "utterance": "Which ones are from the state 'CA ' ?",
            "sql": "select * from votes where state = value"
        },
        {
            "utterance": "Among those , can you give me the last date created ?",
            "sql": "select max ( created ) from votes where state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
    },
    "interaction": [
        {
            "utterance": "Show all contestants .",
            "sql": "select * from contestants"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select contestant_name from contestants"
        },
        {
            "utterance": "Can you not include the name 'Jessie Alloway ' ?",
            "sql": "select contestant_name from contestants where contestant_name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the distinct states and create time of all votes?",
        "sql": "SELECT DISTINCT state ,  created FROM votes"
    },
    "interaction": [
        {
            "utterance": "Show all votes ?",
            "sql": "select * from votes"
        },
        {
            "utterance": "Among these , what is the list of states ?",
            "sql": "select state from votes"
        },
        {
            "utterance": "What are the distinct states and create time ?",
            "sql": "select distinct state , created from votes"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show all the contestants .",
            "sql": "select * from contestants"
        },
        {
            "utterance": "Show all the votes .",
            "sql": "select * from votes"
        },
        {
            "utterance": "Can you show contestants with at least two votes ?",
            "sql": "select * from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number group by t1 . contestant_number having count ( * ) > = value"
        },
        {
            "utterance": "What are their contestant numbers and names ?",
            "sql": "select t1 . contestant_number , t1 . contestant_name from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number group by t1 . contestant_number having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the contestants .",
            "sql": "select * from contestants"
        },
        {
            "utterance": "Show all the votes .",
            "sql": "select * from votes"
        },
        {
            "utterance": "Can you show the contestant with the least votes ?",
            "sql": "select * from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number group by t1 . contestant_number order by count ( * ) asc limit value"
        },
        {
            "utterance": "What is his or her contestant number and contestant name ?",
            "sql": "select t1 . contestant_number , t1 . contestant_name from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number group by t1 . contestant_number order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the number of votes from state 'NY' or 'CA'?",
        "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    "interaction": [
        {
            "utterance": "Show all votes .",
            "sql": "select * from votes"
        },
        {
            "utterance": "What about those from state 'NY ' or 'CA ' ?",
            "sql": "select * from votes where state = value or state = value"
        },
        {
            "utterance": "Give me the count of these votes .",
            "sql": "select count ( * ) from votes where state = value or state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How many contestants did not get voted?",
        "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"
    },
    "interaction": [
        {
            "utterance": "Show all contestants",
            "sql": "select * from contestants"
        },
        {
            "utterance": "Which contestants did not get any votes ?",
            "sql": "select * from contestants where contestant_number not in ( select contestant_number from votes )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the area code in which the most voters voted?",
        "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all area codes and states .",
            "sql": "select * from area_code_state"
        },
        {
            "utterance": "Show all votes .",
            "sql": "select * from votes"
        },
        {
            "utterance": "Get the count of votes for each area code .",
            "sql": "select count ( * ) from area_code_state as t1 join votes as t2 on t1 . state = t2 . state group by t1 . area_code"
        },
        {
            "utterance": "What is the area code in which the most voters voted ?",
            "sql": "select t1 . area_code from area_code_state as t1 join votes as t2 on t1 . state = t2 . state group by t1 . area_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
    },
    "interaction": [
        {
            "utterance": "Show all votes .",
            "sql": "select * from votes"
        },
        {
            "utterance": "Show those that were for the contestant named 'Tabatha Gehling ' .",
            "sql": "select * from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number where t1 . contestant_name = value"
        },
        {
            "utterance": "What are the create dates , states , and phone numbers of these votes ?",
            "sql": "select t2 . created , t2 . state , t2 . phone_number from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number where t1 . contestant_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
    },
    "interaction": [
        {
            "utterance": "Show all area codes .",
            "sql": "select * from area_code_state"
        },
        {
            "utterance": "Can you tell me area codes in which voters voted for the contestant 'Tabatha Gehling ' ?",
            "sql": "select t3 . area_code from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number join area_code_state as t3 on t2 . state = t3 . state where t1 . contestant_name = value"
        },
        {
            "utterance": "How about both the contestant 'Tabatha Gehling ' and the contestant 'Kelly Clauss ' ?",
            "sql": "select t3 . area_code from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number join area_code_state as t3 on t2 . state = t3 . state where t1 . contestant_name = value intersect select t3 . area_code from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number join area_code_state as t3 on t2 . state = t3 . state where t1 . contestant_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    "interaction": [
        {
            "utterance": "How many continents are there ?",
            "sql": "select count ( * ) from continents"
        },
        {
            "utterance": "Show all their ids and names !",
            "sql": "select contid , continent from continents"
        },
        {
            "utterance": "What countries do they each have ?",
            "sql": "select t1 . contid , t1 . continent , * from continents as t1 join countries as t2 on t1 . contid = t2 . continent"
        },
        {
            "utterance": "Count how many there are for each continent name and id !",
            "sql": "select t1 . contid , t1 . continent , count ( * ) from continents as t1 join countries as t2 on t1 . contid = t2 . continent group by t1 . contid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many models does each car maker produce? List maker full name, id and the number.",
        "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    "interaction": [
        {
            "utterance": "What are the names and ids of the different car makers ?",
            "sql": "select fullname , id from car_makers"
        },
        {
            "utterance": "What countries are they each from ?",
            "sql": "select country , fullname , id from car_makers"
        },
        {
            "utterance": "For each , how many models do they each produce ?",
            "sql": "select count ( * ) , t1 . country , t1 . fullname , t1 . id from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id"
        },
        {
            "utterance": "Can actually just show the name , id and the number of models ?",
            "sql": "select t1 . fullname , t1 . id , count ( * ) from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which model of the car has the minimum horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the average horsepower of all cars ?",
            "sql": "select avg ( horsepower ) from cars_data"
        },
        {
            "utterance": "How about the maximum ?",
            "sql": "select t2 . horsepower from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id order by t2 . horsepower desc limit value"
        },
        {
            "utterance": "What about the minimum ?",
            "sql": "select t2 . horsepower from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id order by t2 . horsepower asc limit value"
        },
        {
            "utterance": "What is the model of the car with this horsepower ?",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id order by t2 . horsepower asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the model of the car whose weight is below the average weight.",
        "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    "interaction": [
        {
            "utterance": "What is the average weight of all the cars ?",
            "sql": "select avg ( weight ) from cars_data"
        },
        {
            "utterance": "List all the car information with weights above this ?",
            "sql": "select * from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . weight > ( select avg ( weight ) from cars_data )"
        },
        {
            "utterance": "How about below this ?",
            "sql": "select * from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . weight < ( select avg ( weight ) from cars_data )"
        },
        {
            "utterance": "Please , show just their model names !",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . weight < ( select avg ( weight ) from cars_data )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of the makers that produced some cars in the year of 1970?",
        "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    "interaction": [
        {
            "utterance": "What are the ids , and models of the cars were made in 1970 ?",
            "sql": "select t1 . id , t2 . model from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . year = value"
        },
        {
            "utterance": "Show their horsepower and MPG as well ?",
            "sql": "select t1 . horsepower , t1 . mpg , t1 . id , t2 . model from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . year = value"
        },
        {
            "utterance": "Also provide the names of their makers !",
            "sql": "select t1 . maker , t4 . horsepower , t4 . mpg , t4 . id , t2 . model from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker join car_names as t3 on t2 . model = t3 . model join cars_data as t4 on t3 . makeid = t4 . id where t4 . year = value"
        },
        {
            "utterance": "Just show a unique list of all these different makers .",
            "sql": "select distinct t1 . maker from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker join car_names as t3 on t2 . model = t3 . model join cars_data as t4 on t3 . makeid = t4 . id where t4 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the make and production time of the cars that were produced in the earliest year?",
        "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    "interaction": [
        {
            "utterance": "Show me the makes and models of each car !",
            "sql": "select make , model from car_names"
        },
        {
            "utterance": "Also provide which the year they were produced ?",
            "sql": "select t2 . make , t2 . model , t1 . year from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid"
        },
        {
            "utterance": "Which ones been produce in the earliest year ?",
            "sql": "select t2 . make , t2 . model , t1 . year from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . year = ( select min ( year ) from cars_data )"
        },
        {
            "utterance": "Show just the make and year !",
            "sql": "select t2 . make , t1 . year from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . year = ( select min ( year ) from cars_data )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which distinct car models are the produced after 1980?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    "interaction": [
        {
            "utterance": "What are all the different car models ?",
            "sql": "select distinct model from model_list"
        },
        {
            "utterance": "Show also all the car makes and the years that they were produced !",
            "sql": "select t1 . model , t2 . make , t3 . year from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id"
        },
        {
            "utterance": "Show only those that were made after 1980 !",
            "sql": "select t1 . model , t2 . make , t3 . year from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id where t3 . year > value"
        },
        {
            "utterance": "What are the distinct car models for these ?",
            "sql": "select distinct t1 . model from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id where t3 . year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many car makers are there in each continents? List the continent name and the count.",
        "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    "interaction": [
        {
            "utterance": "What are the names and country name of each car maker ?",
            "sql": "select t1 . maker , t2 . countryname from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid"
        },
        {
            "utterance": "Also provide the continent name for each !",
            "sql": "select t1 . continent , t3 . maker , t2 . countryname from continents as t1 join countries as t2 on t1 . contid = t2 . continent join car_makers as t3 on t2 . countryid = t3 . country"
        },
        {
            "utterance": "How many car makers are there per continent ?",
            "sql": "select t1 . continent , count ( * ) from continents as t1 join countries as t2 on t1 . contid = t2 . continent join car_makers as t3 on t2 . countryid = t3 . country group by t1 . continent"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which of the countries has the most car makers? List the country name.",
        "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many countries are there ?",
            "sql": "select count ( * ) from countries"
        },
        {
            "utterance": "How many car makers belong to each one ?",
            "sql": "select * , count ( * ) from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid group by t1 . country"
        },
        {
            "utterance": "What is the name of the country that has the least number ?",
            "sql": "select t2 . countryname from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid group by t1 . country order by count ( * ) asc limit value"
        },
        {
            "utterance": "How about the most ?",
            "sql": "select t2 . countryname from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid group by t1 . country order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many car models are produced by each maker? List the count and the maker full name.",
        "sql": "SELECT Count(*) ,  T2.FullName FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
    },
    "interaction": [
        {
            "utterance": "How many makers are there ?",
            "sql": "select count ( * ) from car_makers"
        },
        {
            "utterance": "What are their full names and ids ?",
            "sql": "select fullname , id from car_makers"
        },
        {
            "utterance": "What models have they each produced ?",
            "sql": "select t1 . model , t2 . fullname , t2 . id from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id"
        },
        {
            "utterance": "Count how many modes there are per maker .",
            "sql": "select count ( * ) , t2 . fullname , t2 . id from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id group by t2 . id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    "interaction": [
        {
            "utterance": "Show all the car ids with the make amc hornet sporabout ( sw ) ?",
            "sql": "select t1 . id from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . make = value"
        },
        {
            "utterance": "What is its horsepower ?",
            "sql": "select t1 . horsepower from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . make = value"
        },
        {
            "utterance": "How about its MPG ?",
            "sql": "select t1 . mpg from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . make = value"
        },
        {
            "utterance": "How about its accelerate ?",
            "sql": "select t1 . accelerate from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . make = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many car makers are there in france?",
        "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    "interaction": [
        {
            "utterance": "Show all the different car makers ?",
            "sql": "select distinct maker from car_makers"
        },
        {
            "utterance": "What are the names of the countries they belong to ?",
            "sql": "select t1 . maker , t2 . countryname from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid"
        },
        {
            "utterance": "Show just the car makers from France !",
            "sql": "select t1 . maker from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid where t2 . countryname = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid where t2 . countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many car models are produced in the usa?",
        "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    "interaction": [
        {
            "utterance": "How many car models are produced in total ?",
            "sql": "select count ( * ) from model_list"
        },
        {
            "utterance": "How many in Germany ?",
            "sql": "select count ( * ) from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id join countries as t3 on t2 . country = t3 . countryid where t3 . countryname = value"
        },
        {
            "utterance": "How about in Japan ?",
            "sql": "select count ( * ) from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id join countries as t3 on t2 . country = t3 . countryid where t3 . countryname = value"
        },
        {
            "utterance": "How about the USA ?",
            "sql": "select count ( * ) from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id join countries as t3 on t2 . country = t3 . countryid where t3 . countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the smallest weight of the car produced with 8 cylinders in 1974?",
        "sql": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is all the car information for cars produced in 1974 ?",
            "sql": "select * from cars_data where year = value"
        },
        {
            "utterance": "Now , show me just the weight and cylinders of these cars .",
            "sql": "select weight , cylinders from cars_data where year = value"
        },
        {
            "utterance": "List just those with 8 cylinders !",
            "sql": "select weight , cylinders from cars_data where cylinders = value and year = value"
        },
        {
            "utterance": "What is the smallest weight ?",
            "sql": "select weight from cars_data where cylinders = value and year = value order by weight asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the countries having at least one car maker? List name and id.",
        "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    "interaction": [
        {
            "utterance": "What are all the different country names ?",
            "sql": "select countryname from countries"
        },
        {
            "utterance": "Which ones have no car makers ?",
            "sql": "select countryname from countries where countryid not in ( select country from car_makers )"
        },
        {
            "utterance": "Which ones have at least one ?",
            "sql": "select t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country group by t1 . countryid having count ( * ) > = value"
        },
        {
            "utterance": "Also provide the country id !",
            "sql": "select t1 . countryname , t1 . countryid from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country group by t1 . countryid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which countries in europe have at least 3 car manufacturers?",
        "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    "interaction": [
        {
            "utterance": "Show all the car makers and their country name ?",
            "sql": "select t3 . maker , t1 . countryname from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country"
        },
        {
            "utterance": "Count how many there are per country name ?",
            "sql": "select t1 . countryname , count ( * ) from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country group by t1 . countryname"
        },
        {
            "utterance": "Show just those from countries in the continent Europe .",
            "sql": "select t1 . countryname , count ( * ) from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value group by t1 . countryname"
        },
        {
            "utterance": "List the country names of those with at least 3 manufacturers !",
            "sql": "select t1 . countryname from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value group by t1 . countryname having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the horsepower , make for each car !",
            "sql": "select t2 . horsepower , t1 . make from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id"
        },
        {
            "utterance": "Show those with 8 cylinders !",
            "sql": "select t2 . horsepower , t1 . make from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value"
        },
        {
            "utterance": "How about 3 ?",
            "sql": "select t2 . horsepower , t1 . make from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value"
        },
        {
            "utterance": "Show the one with the maximum horsepower .",
            "sql": "select t2 . horsepower , t1 . make from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value order by t2 . horsepower desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is id of the car with the max horsepower ?",
            "sql": "select id from cars_data order by horsepower desc limit value"
        },
        {
            "utterance": "How about with the max MPG ?",
            "sql": "select id from cars_data order by mpg desc limit value"
        },
        {
            "utterance": "Show its make !",
            "sql": "select t1 . make from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id order by t2 . mpg desc limit value"
        },
        {
            "utterance": "Now show its model !",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id order by t2 . mpg desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the average edispl of the cars of model volvo?",
        "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    "interaction": [
        {
            "utterance": "What is the average edispl of all cars ?",
            "sql": "select avg ( edispl ) from cars_data"
        },
        {
            "utterance": "Can you show the average per car make ?",
            "sql": "select t1 . make , avg ( t2 . edispl ) from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id group by t1 . make"
        },
        {
            "utterance": "How about per car model ?",
            "sql": "select t1 . model , avg ( t2 . edispl ) from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id group by t1 . model"
        },
        {
            "utterance": "Show the average for the model volvo !",
            "sql": "select avg ( t2 . edispl ) from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t1 . model = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Which model has the most version(make) of cars?",
        "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are all the different models for each car ?",
            "sql": "select distinct model from car_names"
        },
        {
            "utterance": "What are the makes for each ?",
            "sql": "select model , make from car_names"
        },
        {
            "utterance": "How many makes are there for each ?",
            "sql": "select model , count ( * ) from car_names group by model"
        },
        {
            "utterance": "What is the model name with the most makes ?",
            "sql": "select model from car_names group by model order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 20,
    "final": {
        "utterance": "How many car models were produced by the maker with full name American Motor Company?",
        "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    "interaction": [
        {
            "utterance": "Show the full names of all the different car makers ?",
            "sql": "select fullname from car_makers"
        },
        {
            "utterance": "Also include the car models produced by each !",
            "sql": "select t1 . fullname , t2 . model from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker"
        },
        {
            "utterance": "Show me just those produced by the maker with full name American Motor Company !",
            "sql": "select t1 . fullname , t2 . model from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker where t1 . fullname = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker where t1 . fullname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Which makers designed more than 3 car models? List full name and the id.",
        "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    "interaction": [
        {
            "utterance": "What is all the information for the makers that have designed at least 1 car model !",
            "sql": "select * from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker"
        },
        {
            "utterance": "Which ones have designed more than 1 ?",
            "sql": "select * from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "How about more than 3 ?",
            "sql": "select * from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "List just the full name and id !",
            "sql": "select t1 . fullname , t1 . id from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    "interaction": [
        {
            "utterance": "How many different models has maker with full name General Motors produced ?",
            "sql": "select count ( distinct t2 . model ) from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id where t3 . fullname = value"
        },
        {
            "utterance": "How many different models weigh over 3500 pounds ?",
            "sql": "select count ( distinct t2 . model ) from car_names as t1 join model_list as t2 on t1 . model = t2 . model join cars_data as t3 on t1 . makeid = t3 . id where t3 . weight > value"
        },
        {
            "utterance": "How many models have either of these features ?",
            "sql": "select count ( distinct t2 . model ) from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value or t4 . weight > value"
        },
        {
            "utterance": "Show me the distinct list of their model names !",
            "sql": "select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value or t4 . weight > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 23,
    "final": {
        "utterance": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "sql": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;"
    },
    "interaction": [
        {
            "utterance": "Show the years and weight of all the cars !",
            "sql": "select year , weight from cars_data"
        },
        {
            "utterance": "Show distinct years that the cars that weigh more than 3000 were produced !",
            "sql": "select distinct year from cars_data as t1 where weight > value"
        },
        {
            "utterance": "How about the different years for those that weight less than 4000 .",
            "sql": "select distinct year from cars_data as t1 where weight < value"
        },
        {
            "utterance": "What are the distinct years , for the cars that are both ?",
            "sql": "select distinct year from cars_data where weight > value and weight < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the horsepower of the car with the largest accelerate?",
        "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the lowest accelerate for any car ?",
            "sql": "select accelerate from cars_data order by accelerate asc limit value"
        },
        {
            "utterance": "How about the highest ?",
            "sql": "select accelerate from cars_data order by accelerate desc limit value"
        },
        {
            "utterance": "What is the ID , Make and Model of this car ?",
            "sql": "select t1 . id , t2 . make , t2 . model from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid order by t1 . accelerate desc limit value"
        },
        {
            "utterance": "Show just its horsepower .",
            "sql": "select horsepower from cars_data order by accelerate desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 25,
    "final": {
        "utterance": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show all the car information for any car of the model volvo !",
            "sql": "select * from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . model = value"
        },
        {
            "utterance": "What is the car with the least accelerate ?",
            "sql": "select * from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . model = value order by t1 . accelerate asc limit value"
        },
        {
            "utterance": "What is its horsepower ?",
            "sql": "select t1 . horsepower from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . model = value order by t1 . accelerate asc limit value"
        },
        {
            "utterance": "What about its number of cylinders ?",
            "sql": "select t1 . cylinders from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . model = value order by t1 . accelerate asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    "interaction": [
        {
            "utterance": "What is largest horsepower of all cars ?",
            "sql": "select horsepower from cars_data order by horsepower desc limit value"
        },
        {
            "utterance": "What is the accelerate of the car with this horsepower ?",
            "sql": "select accelerate from cars_data order by horsepower desc limit value"
        },
        {
            "utterance": "What are the car ids of the cars with a greater accelerate than this ?",
            "sql": "select id from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit value )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 27,
    "final": {
        "utterance": "How many countries has more than 2 car makers?",
        "sql": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );"
    },
    "interaction": [
        {
            "utterance": "What are the names of the countries that have no car makers ?",
            "sql": "select countryname from countries where countryid not in ( select t1 . countryid from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country )"
        },
        {
            "utterance": "Show me all the names of all the different countries outside of those !",
            "sql": "select distinct t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country"
        },
        {
            "utterance": "How many of these have more than 1 car maker ?",
            "sql": "select count ( * ) from ( select t1 . countryid , count ( * ) from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country group by t1 . countryid having count ( * ) > value )"
        },
        {
            "utterance": "How about more than 2 ?",
            "sql": "select count ( * ) from ( select t1 . countryid , count ( * ) from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country group by t1 . countryid having count ( * ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 28,
    "final": {
        "utterance": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show all models and horsepowers of all cars !",
            "sql": "select t1 . model , t2 . horsepower from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id"
        },
        {
            "utterance": "Now show just the ones with 4 cylinders .",
            "sql": "select t1 . model , t2 . horsepower from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value"
        },
        {
            "utterance": "What is the model of that with the lowest horsepower ?",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value order by t2 . horsepower asc limit value"
        },
        {
            "utterance": "How about the greatest horsepower ?",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value order by t2 . horsepower desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
    },
    "interaction": [
        {
            "utterance": "What is the lowest horsepower of all cars ?",
            "sql": "select min ( horsepower ) from cars_data"
        },
        {
            "utterance": "Show all the ids and makes of those with a horsepower greater than this !",
            "sql": "select t2 . makeid , t2 . make from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . horsepower > ( select min ( horsepower ) from cars_data )"
        },
        {
            "utterance": "Which ones have 5 cylinders or less ?",
            "sql": "select t2 . makeid , t2 . make from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . horsepower > ( select min ( horsepower ) from cars_data ) and t1 . cylinders < = value"
        },
        {
            "utterance": "How about 3 or less ?",
            "sql": "select t2 . makeid , t2 . make from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . horsepower > ( select min ( horsepower ) from cars_data ) and t1 . cylinders < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "sql": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the mpg , horsepower and accelerate for all the cars that were produced before 1980 !",
            "sql": "select mpg , horsepower , accelerate from cars_data where year < value"
        },
        {
            "utterance": "Also include the cars that have 8 cylinders !",
            "sql": "select mpg , horsepower , accelerate from cars_data where cylinders = value or year < value"
        },
        {
            "utterance": "What is the max horsepower for this group ?",
            "sql": "select accelerate from cars_data where cylinders = value or year < value order by accelerate desc limit value"
        },
        {
            "utterance": "how about the max mpg ?",
            "sql": "select mpg from cars_data where cylinders = value or year < value order by mpg desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    "interaction": [
        {
            "utterance": "Show all the models that were built by the Ford Motor Company .",
            "sql": "select distinct t1 . model from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id where t2 . fullname = value"
        },
        {
            "utterance": "What are all the models except those !",
            "sql": "select distinct t1 . model from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id where t2 . fullname ! = value"
        },
        {
            "utterance": "Also provide the weights for all different makes for each of these models .",
            "sql": "select t1 . model , t2 . make , t3 . weight from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id join car_makers as t4 on t1 . maker = t4 . id where t3 . weight < value and t4 . fullname ! = value"
        },
        {
            "utterance": "List all the different models from these that have makes that are lighter than 3500 !",
            "sql": "select distinct t1 . model from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id join car_makers as t4 on t1 . maker = t4 . id where t3 . weight < value and t4 . fullname ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the name of the countries where there is not a single car maker?",
        "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    "interaction": [
        {
            "utterance": "What are all the names of countries ?",
            "sql": "select countryname from countries"
        },
        {
            "utterance": "Which ones have at least one car maker ?",
            "sql": "select distinct t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country"
        },
        {
            "utterance": "Show me all of car names other than these !",
            "sql": "select countryname from countries except select t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.",
        "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    "interaction": [
        {
            "utterance": "Show all the car maker id , names , the models and makes they produce !",
            "sql": "select t1 . id , t1 . maker , t2 . model from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker"
        },
        {
            "utterance": "How many model does each car maker produce ? List the id and maker !",
            "sql": "select t1 . id , t1 . maker , count ( * ) from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id"
        },
        {
            "utterance": "Show me those that produce at least 2 !",
            "sql": "select t1 . id , t1 . maker from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > = value"
        },
        {
            "utterance": "For each of these , only show those that have more than 3 car makes !",
            "sql": "select t1 . id , t1 . maker from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > = value intersect select t1 . id , t1 . maker from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker join car_names as t3 on t2 . model = t3 . model group by t1 . id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Give the names of the nations that were founded after 1950.",
        "sql": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the countries ?",
            "sql": "select name from country"
        },
        {
            "utterance": "Give the names of the ones that became independent after 1950 .",
            "sql": "select name from country where indepyear > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many countries have governments that are republics?",
        "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    "interaction": [
        {
            "utterance": "How many countries are there ?",
            "sql": "select count ( * ) from country"
        },
        {
            "utterance": "Out of those , how many have a republic as their form of government ?",
            "sql": "select count ( * ) from country where governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How much surface area do the countires in the Carribean cover together?",
        "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    "interaction": [
        {
            "utterance": "What are the countries in the Carribean region ?",
            "sql": "select * from country where region = value"
        },
        {
            "utterance": "What is the surface area of each of those countries ?",
            "sql": "select surfacearea from country where region = value"
        },
        {
            "utterance": "Find the total surface area of the above .",
            "sql": "select sum ( surfacearea ) from country where region = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the continent name which Anguilla belongs to?",
        "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    "interaction": [
        {
            "utterance": "What continent does each country belong to ?",
            "sql": "select continent from country"
        },
        {
            "utterance": "Which one does Anguila belong to ?",
            "sql": "select continent from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What region is Kabul in?",
        "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the regions ?",
            "sql": "select region from country"
        },
        {
            "utterance": "Which of those is the city Kabul located in ?",
            "sql": "select region from country as t1 join city as t2 on t1 . code = t2 . countrycode where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What language is predominantly spoken in Aruba?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the languages ?",
            "sql": "select language from countrylanguage"
        },
        {
            "utterance": "What are the languages spoken in Aruba ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        },
        {
            "utterance": "Which one is the most popular ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value order by percentage desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Give me Brazil\u2019s population and life expectancies.",
        "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    "interaction": [
        {
            "utterance": "What are the population and life expectancies for all countries ?",
            "sql": "select population , lifeexpectancy from country"
        },
        {
            "utterance": "Of those , which ones are for the country Brazil ?",
            "sql": "select population , lifeexpectancy from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What region does Angola belong to and what is its population?",
        "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    "interaction": [
        {
            "utterance": "Which region is Angola in ?",
            "sql": "select region from country where name = value"
        },
        {
            "utterance": "For that country , what is its population ?",
            "sql": "select population from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 8,
    "final": {
        "utterance": "How long is the people\u2019s average life expectancy in Central Africa?",
        "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    "interaction": [
        {
            "utterance": "What are the life expectancies for all the countries ?",
            "sql": "select lifeexpectancy from country"
        },
        {
            "utterance": "What are the life expectancies for the countries in the region of Central Africa ?",
            "sql": "select lifeexpectancy from country where region = value"
        },
        {
            "utterance": "What is the average of those ?",
            "sql": "select avg ( lifeexpectancy ) from country where region = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Give the name of the country in Asia with the lowest life expectancy.",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the countries in Asia ?",
            "sql": "select name from country where continent = value"
        },
        {
            "utterance": "Which one has the shortest life expectancy ?",
            "sql": "select name from country where continent = value order by lifeexpectancy limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How many people live in Asia, and what is the largest GNP among them?",
        "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    "interaction": [
        {
            "utterance": "How many people live in Asia ?",
            "sql": "select sum ( population ) from country where continent = value"
        },
        {
            "utterance": "What about the largest GNP among them ?",
            "sql": "select max ( gnp ) from country where continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Give the average life expectancy for countries in Africa which are republics?",
        "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    "interaction": [
        {
            "utterance": "Which countries are in Africa ?",
            "sql": "select * from country where continent = value"
        },
        {
            "utterance": "Which countries are also republics ?",
            "sql": "select * from country where continent = value and governmentform = value"
        },
        {
            "utterance": "What is the average of their life expectancies ?",
            "sql": "select avg ( lifeexpectancy ) from country where continent = value and governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Give the total surface area covered by countries in Asia or Europe.",
        "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    "interaction": [
        {
            "utterance": "What are the countries in the continents of Asia or Europe ?",
            "sql": "select * from country where continent = value or continent = value"
        },
        {
            "utterance": "What is the surface area of each country ?",
            "sql": "select surfacearea from country where continent = value or continent = value"
        },
        {
            "utterance": "What is the total surface area summed up ?",
            "sql": "select sum ( surfacearea ) from country where continent = value or continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the total population of Gelderland district?",
        "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    "interaction": [
        {
            "utterance": "What are the populations of each city in the district of Gelderland ?",
            "sql": "select population from city where district = value"
        },
        {
            "utterance": "What is the total population in that district ?",
            "sql": "select sum ( population ) from city where district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Give the mean GNP and total population of nations which are considered US territory.",
        "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    "interaction": [
        {
            "utterance": "What are all the nations ?",
            "sql": "select * from country"
        },
        {
            "utterance": "Which of those have a government that is a US territory ?",
            "sql": "select * from country where governmentform = value"
        },
        {
            "utterance": "For those , what is the average GNP and total population ?",
            "sql": "select avg ( gnp ) , sum ( population ) from country where governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the number of distinct languages used around the world?",
        "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    "interaction": [
        {
            "utterance": "What are all the distinct languages used around the world ?",
            "sql": "select distinct language from countrylanguage"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct language ) from countrylanguage"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 16,
    "final": {
        "utterance": "How many different forms of governments are there in Africa?",
        "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    "interaction": [
        {
            "utterance": "What are the distinct forms of government in the continent of Africa ?",
            "sql": "select distinct governmentform from country where continent = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct governmentform ) from country where continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many languages are spoken in Aruba?",
        "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    "interaction": [
        {
            "utterance": "What is the information about the country Aruba ?",
            "sql": "select * from country where name = value"
        },
        {
            "utterance": "What are the languages used in Aruba ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( t2 . language ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many official languages are spoken in Afghanistan?",
        "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "What are the languages used in Afghanistan ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        },
        {
            "utterance": "Of those , how many are the official languages ?",
            "sql": "select count ( * ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value and isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Give the name of the nation that uses the greatest amount of languages.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many languages are spoken in each country ?",
            "sql": "select count ( * ) , t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode group by t1 . name"
        },
        {
            "utterance": "Which country speaks the most ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode group by t1 . name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which continent speaks the most languages?",
        "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many languages are spoken on each continent ?",
            "sql": "select count ( * ) , t1 . continent from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode group by t1 . continent"
        },
        {
            "utterance": "Which one speaks the most languages ?",
            "sql": "select t1 . continent from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode group by t1 . continent order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the number of nations that use English and Dutch?",
        "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    "interaction": [
        {
            "utterance": "What are the countries that speak English ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "Which of those also speak Dutch ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value intersect select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( * ) from ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value intersect select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Give the names of nations that speak both English and French.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    "interaction": [
        {
            "utterance": "What are the names of countries which speak English ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "Of those countries , what are the names of the nations that speak French as well ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value intersect select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Give the names of countries with English and French as official languages.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "What are the official languages of each country ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . isofficial = value"
        },
        {
            "utterance": "Of those countries , give the names of the ones that have English as one of the official languages .",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value"
        },
        {
            "utterance": "Of those , which also have French as another official language ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value intersect select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 24,
    "final": {
        "utterance": "How many continents speak Chinese?",
        "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    "interaction": [
        {
            "utterance": "In which countries is Chinese spoken ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "Which distinct continents are they in ?",
            "sql": "select distinct t1 . continent from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( distinct continent ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Which regions speak Dutch or English?",
        "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    "interaction": [
        {
            "utterance": "What are all the different regions ?",
            "sql": "select distinct region from country"
        },
        {
            "utterance": "Which of those speak Dutch or English ?",
            "sql": "select distinct t1 . region from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value or t2 . language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Which countries have either English or Dutch as an official language?",
        "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "What are the official languages for each country ?",
            "sql": "select t2 . language , t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where isofficial = value"
        },
        {
            "utterance": "Which of these countries have English or Dutch ?",
            "sql": "select * from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and isofficial = value union select * from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the language that is used by the largest number of Asian nations?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the different languages used in the continent of Asia ?",
            "sql": "select distinct t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . continent = value"
        },
        {
            "utterance": "Which one is used by the largest number of Asian countries ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . continent = value group by t2 . language order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What languages are only used by a single country with a republic government?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Which countries have republics as their form of government ?",
            "sql": "select * from country where governmentform = value"
        },
        {
            "utterance": "Which language is spoken by only one of those countries ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . governmentform = value group by t2 . language having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the most populace city that speaks English?",
        "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the cities that use English ?",
            "sql": "select t1 . name from city as t1 join countrylanguage as t2 on t1 . countrycode = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "Which of those has the largest population ?",
            "sql": "select t1 . name , t1 . population from city as t1 join countrylanguage as t2 on t1 . countrycode = t2 . countrycode where t2 . language = value order by t1 . population desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names , population , and life expectancy for all the countries in Asia ?",
            "sql": "select name , population , lifeexpectancy from country where continent = value"
        },
        {
            "utterance": "Of those , which belong to the country with the largest surface area ?",
            "sql": "select name , population , lifeexpectancy from country where continent = value order by surfacearea desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Give the mean life expectancy of countries in which English is not the official language.",
        "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    "interaction": [
        {
            "utterance": "What are the official languages of each country ?",
            "sql": "select t2 . language , t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . isofficial = value"
        },
        {
            "utterance": "Which countries do not have English as the official language ?",
            "sql": "select * from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value )"
        },
        {
            "utterance": "In those countries , what is the average life expectancy ?",
            "sql": "select avg ( lifeexpectancy ) from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 32,
    "final": {
        "utterance": "How many people live in countries that do not speak English?",
        "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    "interaction": [
        {
            "utterance": "What are the names of each country that does not speak English ?",
            "sql": "select name from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value )"
        },
        {
            "utterance": "How many people live in those countries ?",
            "sql": "select sum ( population ) from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "Which country has a head of state named Beatrix ?",
            "sql": "select * from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . headofstate = value"
        },
        {
            "utterance": "What languages are spoken in that country ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . headofstate = value"
        },
        {
            "utterance": "Which of those languages is the official one ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . headofstate = value and t2 . isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 34,
    "final": {
        "utterance": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the countries ?",
            "sql": "select t1 . name from country as t1"
        },
        {
            "utterance": "What are the names of those countries that were founded after 1930 ?",
            "sql": "select t1 . name from country as t1 where indepyear < value"
        },
        {
            "utterance": "For those countries , how many unique official languages are spoken in total ?",
            "sql": "select count ( distinct t2 . language ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where indepyear < value and t2 . isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Which countries have greater area than that of any country in Europe?",
        "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    "interaction": [
        {
            "utterance": "What are all the information about European countries ?",
            "sql": "select * from country where continent = value"
        },
        {
            "utterance": "Of those countries , What is the minimum surface area ?",
            "sql": "select min ( surfacearea ) from country where continent = value"
        },
        {
            "utterance": "What are the countries that have a greater surface area than that ?",
            "sql": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Which African countries have a smaller population than that of any country in Asia?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    "interaction": [
        {
            "utterance": "What is the maximum population of a country in Asia ?",
            "sql": "select min ( population ) from country where continent = value"
        },
        {
            "utterance": "Which countries in Africa have a population smaller than that ?",
            "sql": "select name from country where continent = value and population < ( select max ( population ) from country where continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    "interaction": [
        {
            "utterance": "What is the smallest population of a country in Africa ?",
            "sql": "select min ( population ) from country where continent = value"
        },
        {
            "utterance": "Which Asian countries have a greater population than that ?",
            "sql": "select name from country where continent = value and population > ( select min ( population ) from country where continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 38,
    "final": {
        "utterance": "Return the country codes for countries that do not speak English.",
        "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    "interaction": [
        {
            "utterance": "What are the country codes of all the countries ?",
            "sql": "select countrycode from countrylanguage"
        },
        {
            "utterance": "Of those countries , give the country codes for those which do not speak English .",
            "sql": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 39,
    "final": {
        "utterance": "Give the country codes for countries in which people speak langauges that are not English.",
        "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE ! =  \"English\""
    },
    "interaction": [
        {
            "utterance": "What are the country codes of all the countries ?",
            "sql": "select distinct countrycode from countrylanguage"
        },
        {
            "utterance": "Of those , which do not speak English ?",
            "sql": "select distinct countrycode from countrylanguage where language ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "sql": "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    "interaction": [
        {
            "utterance": "What are the country codes for countries which are not republics ?",
            "sql": "select code from country where governmentform ! = value"
        },
        {
            "utterance": "Of those , which do not speak English ?",
            "sql": "select code from country where governmentform ! = value except select countrycode from countrylanguage where language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the names of cities in Europe for which English is not the official language?",
        "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    "interaction": [
        {
            "utterance": "What are the names of the countries where English is the official language ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . isofficial = value and t2 . language = value"
        },
        {
            "utterance": "What are the names of the countries in Europe that are not one of those ?",
            "sql": "select name from country where continent = value and name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . isofficial = value and t2 . language = value )"
        },
        {
            "utterance": "What are the names of the cities in those countries ?",
            "sql": "select distinct t2 . name from country as t1 join city as t2 on t2 . countrycode = t1 . code where t1 . continent = value and t1 . name not in ( select t3 . name from country as t3 join countrylanguage as t4 on t3 . code = t4 . countrycode where t4 . isofficial = value and t4 . language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
    },
    "interaction": [
        {
            "utterance": "What are the countries in Asia where Chinese is spoken ?",
            "sql": "select * from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t1 . continent = value"
        },
        {
            "utterance": "Of those , which have Chinese as the official language ?",
            "sql": "select * from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . isofficial = value and t2 . language = value and t1 . continent = value"
        },
        {
            "utterance": "What are the different cities in those countries ?",
            "sql": "select distinct t3 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode join city as t3 on t1 . code = t3 . countrycode where t2 . isofficial = value and t2 . language = value and t1 . continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 43,
    "final": {
        "utterance": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which country has the smallest population ?",
            "sql": "select * from country order by population limit value"
        },
        {
            "utterance": "What is its name , independence year , and surface area ?",
            "sql": "select name , surfacearea , indepyear from country order by population limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 44,
    "final": {
        "utterance": "Give the name, population, and head of state for the country that has the largest area.",
        "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the country with the largest surface area ?",
            "sql": "select * from country order by surfacearea desc limit value"
        },
        {
            "utterance": "What is its population , name and leader ?",
            "sql": "select name , population , headofstate from country order by surfacearea desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 45,
    "final": {
        "utterance": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What are the names of the countries ?",
            "sql": "select name from country"
        },
        {
            "utterance": "Which of them speak at least three languages ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode group by t1 . name having count ( * ) > value"
        },
        {
            "utterance": "Also , how many languages are spoken in each of those countries ?",
            "sql": "select count ( t2 . language ) , t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode group by t1 . name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 46,
    "final": {
        "utterance": "How many cities in each district have a population that is above the average population across all cities?",
        "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    "interaction": [
        {
            "utterance": "What is the average city population for each city ?",
            "sql": "select avg ( population ) from city"
        },
        {
            "utterance": "For each district , count how many cities have a population greater than the average .",
            "sql": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 47,
    "final": {
        "utterance": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    "interaction": [
        {
            "utterance": "The countries with which government form have an average life expectancy greater than age 72 ?",
            "sql": "select * from country group by governmentform having avg ( lifeexpectancy ) > value"
        },
        {
            "utterance": "For those , list the total population and government form name .",
            "sql": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 48,
    "final": {
        "utterance": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    "interaction": [
        {
            "utterance": "Which continents have an average life expectancy less than age 72 ?",
            "sql": "select continent from country group by continent having avg ( lifeexpectancy ) < value"
        },
        {
            "utterance": "Give their average life expectancy and total population .",
            "sql": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 49,
    "final": {
        "utterance": "Return the names and surface areas of the 5 largest countries.",
        "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "What are the countries with the top 5 largest surface areas ?",
            "sql": "select * from country order by surfacearea desc limit value"
        },
        {
            "utterance": "What are the surface areas and names of those countries ?",
            "sql": "select name , surfacearea from country order by surfacearea desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 50,
    "final": {
        "utterance": "Return the names of the 3 most populated countries.",
        "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Order the countries by descending population size .",
            "sql": "select * from country order by population desc"
        },
        {
            "utterance": "Give the names of the 3 countries which have the most .",
            "sql": "select name from country order by population desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 51,
    "final": {
        "utterance": "Return the names of the 3 countries with the fewest people.",
        "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Order the countries by increasing population .",
            "sql": "select * from country order by population"
        },
        {
            "utterance": "Give the names of the 3 countries with the lowest .",
            "sql": "select name from country order by population desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 52,
    "final": {
        "utterance": "Count the number of countries in Asia.",
        "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    "interaction": [
        {
            "utterance": "What are the countries in the continent of Asia ?",
            "sql": "select * from country where continent = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from country where continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 53,
    "final": {
        "utterance": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "sql": "SELECT Name FROM country WHERE WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    "interaction": [
        {
            "utterance": "Which countries are in the continent of Europe ?",
            "sql": "select * from country where continent = value"
        },
        {
            "utterance": "Of those , what are the names of those that have a population of 80000 ?",
            "sql": "select name from country where continent = value and population = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 54,
    "final": {
        "utterance": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "sql": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000"
    },
    "interaction": [
        {
            "utterance": "What countries are in North America ?",
            "sql": "select * from country where continent = value"
        },
        {
            "utterance": "Of those , which have surface area greater than 3000 ?",
            "sql": "select * from country where continent = value and surfacearea > value"
        },
        {
            "utterance": "What is the total population and average surface area of those countries ?",
            "sql": "select sum ( population ) , avg ( surfacearea ) from country where continent = value and surfacearea > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 55,
    "final": {
        "utterance": "Return the names of cities that have a population between 160000 and 900000.",
        "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the cities ?",
            "sql": "select name from city"
        },
        {
            "utterance": "Which of those have a population between 160000 and 900000 ?",
            "sql": "select name from city where population between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 56,
    "final": {
        "utterance": "Give the language that is spoken in the most countries.",
        "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the different languages ?",
            "sql": "select language from countrylanguage"
        },
        {
            "utterance": "Which one is spoken in the most countries ?",
            "sql": "select language from countrylanguage group by language order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 0,
    "final": {
        "utterance": "Which department offers the most number of degrees? List department name and id.",
        "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give me the description of the department that offers the most number of degrees .",
            "sql": "select t2 . department_description , t1 . department_id from degree_programs as t1 join departments as t2 on t1 . department_id = t2 . department_id group by t1 . department_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What 's the name and id of that department ?",
            "sql": "select t2 . department_name , t1 . department_id from degree_programs as t1 join departments as t2 on t1 . department_id = t2 . department_id group by t1 . department_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 1,
    "final": {
        "utterance": "How many degrees does the engineering department offer?",
        "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    "interaction": [
        {
            "utterance": "Show me all the degrees offered by the engineering department .",
            "sql": "select * from departments as t1 join degree_programs as t2 on t1 . department_id = t2 . department_id where t1 . department_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) from departments as t1 join degree_programs as t2 on t1 . department_id = t2 . department_id where t1 . department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the names and id of courses having at most 2 sections?",
        "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "Show me courses that have exactly 2 sections .",
            "sql": "select * from courses as t1 join sections as t2 on t1 . course_id = t2 . course_id group by t1 . course_id having count ( * ) = value"
        },
        {
            "utterance": "Show me names and ids for courses that have at most 2 sections .",
            "sql": "select t1 . course_name , t1 . course_id from courses as t1 join sections as t2 on t1 . course_id = t2 . course_id group by t1 . course_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the semester which most student registered in? Show both the name and the id.",
        "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which semester did the least number of students register ? Give me its name and id .",
            "sql": "select t1 . semester_name , t1 . semester_id from semesters as t1 join student_enrolment as t2 on t1 . semester_id = t2 . semester_id group by t1 . semester_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "How about the semester that most number of students registered ?",
            "sql": "select t1 . semester_name , t1 . semester_id from semesters as t1 join student_enrolment as t2 on t1 . semester_id = t2 . semester_id group by t1 . semester_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the description of the department whose name has the substring the computer?",
        "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    "interaction": [
        {
            "utterance": "Show me all department names that contain the word `` computer ''",
            "sql": "select * from departments where department_name like value"
        },
        {
            "utterance": "Show me their descriptions .",
            "sql": "select department_description from departments where department_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 5,
    "final": {
        "utterance": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    "interaction": [
        {
            "utterance": "How many people are enrolled in 2 degree programs in one semester ?",
            "sql": "select count ( * ) from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) = value"
        },
        {
            "utterance": "Show me their first , middle , and last names .",
            "sql": "select t1 . first_name , t1 . middle_name , t1 . last_name , t1 . student_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 6,
    "final": {
        "utterance": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    "interaction": [
        {
            "utterance": "How many people are enrolled in the Bachelor degree program ?",
            "sql": "select distinct count ( * ) from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t3 . degree_summary_name = value"
        },
        {
            "utterance": "What are their first , middle , and last names ?",
            "sql": "select distinct t1 . first_name , t1 . middle_name , t1 . last_name from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t3 . degree_summary_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the kind of program which most number of students are enrolled in?",
        "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the descriptions of programs with 3 highest number of enrolled students .",
            "sql": "select t1 . degree_summary_description from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_summary_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show me the name of program with the most enrolled students .",
            "sql": "select t1 . degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_summary_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the description of the program that has the least number of enrolled students ?",
            "sql": "select t1 . degree_summary_description from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_program_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "How about the program that has the most number of enrolled students ?",
            "sql": "select t1 . degree_summary_description from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_program_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show me the id and summary .",
            "sql": "select t1 . degree_program_id , t1 . degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_program_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 9,
    "final": {
        "utterance": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the id , first and last names of top 3 students who have enrolled for the most times in any program .",
            "sql": "select t1 . student_id , t1 . first_name , t1 . middle_name , t1 . last_name , count ( * ) , t1 . student_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show me just the top 1 .",
            "sql": "select t1 . student_id , t1 . first_name , t1 . middle_name , t1 . last_name , count ( * ) , t1 . student_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 10,
    "final": {
        "utterance": "Which semesters do not have any student enrolled? List the semester name.",
        "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    "interaction": [
        {
            "utterance": "Give me the description of a semester with no enrolled students .",
            "sql": "select semester_description from semesters where semester_id not in ( select semester_id from student_enrolment )"
        },
        {
            "utterance": "What 's the name of that semester ?",
            "sql": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 11,
    "final": {
        "utterance": "What's the name of the course with most number of enrollments?",
        "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What 's the name of the course with the least number of enrollments ?",
            "sql": "select t1 . course_name from courses as t1 join student_enrolment_courses as t2 on t1 . course_id = t2 . course_id group by t1 . course_name order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many enrollments does the course with most enrollments have ?",
            "sql": "select count ( * ) from courses as t1 join student_enrolment_courses as t2 on t1 . course_id = t2 . course_id group by t1 . course_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What 's the name of that course ?",
            "sql": "select t1 . course_name from courses as t1 join student_enrolment_courses as t2 on t1 . course_id = t2 . course_id group by t1 . course_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    "interaction": [
        {
            "utterance": "How many students currently live in North Carolina ?",
            "sql": "select count ( * ) from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value"
        },
        {
            "utterance": "How many of those students have not registered in any degree program ?",
            "sql": "select count ( * ) from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value except select distinct t3 . last_name from students as t3 join student_enrolment as t4 on t3 . student_id = t4 . student_id"
        },
        {
            "utterance": "What are their last names ?",
            "sql": "select t1 . last_name from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value except select distinct t3 . last_name from students as t3 join student_enrolment as t4 on t3 . student_id = t4 . student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the date and id of the transcript with at least 2 course results.",
        "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show me date and id of transcripts with exactly 2 course results .",
            "sql": "select t2 . transcript_date , t1 . transcript_id from transcript_contents as t1 join transcripts as t2 on t1 . transcript_id = t2 . transcript_id group by t1 . transcript_id having count ( * ) = value"
        },
        {
            "utterance": "How about transcripts with at least 2 course results ?",
            "sql": "select t2 . transcript_date , t1 . transcript_id from transcript_contents as t1 join transcripts as t2 on t1 . transcript_id = t2 . transcript_id group by t1 . transcript_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
    },
    "interaction": [
        {
            "utterance": "What is the address of the student with first name Timothy and last name Ward ?",
            "sql": "select current_address_id from students where first_name = value and last_name = value"
        },
        {
            "utterance": "What 's his phone number ?",
            "sql": "select cell_mobile_number from students where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 15,
    "final": {
        "utterance": "Who is the first student to register? List the first name, middle name and last name.",
        "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who was the last student to register ? Show me the first , middle , and last names of that student .",
            "sql": "select first_name , middle_name , last_name from students order by date_first_registered desc limit value"
        },
        {
            "utterance": "Who was the first to register ?",
            "sql": "select first_name , middle_name , last_name from students order by date_first_registered asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 16,
    "final": {
        "utterance": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who is the least recent graduate of the school ? List the first , middle , and last names .",
            "sql": "select first_name , middle_name , last_name from students order by date_left desc limit value"
        },
        {
            "utterance": "Who is the earliest graduate of the school ?",
            "sql": "select first_name , middle_name , last_name from students order by date_left asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 17,
    "final": {
        "utterance": "Which address holds the most number of students currently? List the address id and all lines.",
        "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give me the id of the address that holds the most number of students ?",
            "sql": "select t1 . address_id from addresses as t1 join students as t2 on t1 . address_id = t2 . current_address_id group by t1 . address_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many students live there ?",
            "sql": "select count ( * ) from addresses as t1 join students as t2 on t1 . address_id = t2 . current_address_id group by t1 . address_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Give me all the lines as well as the id of that address .",
            "sql": "select t1 . address_id , t1 . line_1 , t1 . line_2 from addresses as t1 join students as t2 on t1 . address_id = t2 . current_address_id group by t1 . address_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 18,
    "final": {
        "utterance": "When is the first transcript released? List the date and details.",
        "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give me details of the first transcript released .",
            "sql": "select other_details from transcripts order by transcript_date asc limit value"
        },
        {
            "utterance": "Tell me when it was released as well , along with its details .",
            "sql": "select transcript_date , other_details from transcripts order by transcript_date asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the last transcript release date?",
        "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the oldest transcript release date ?",
            "sql": "select transcript_date from transcripts order by transcript_date asc limit value"
        },
        {
            "utterance": "How about the latest ?",
            "sql": "select transcript_date from transcripts order by transcript_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 20,
    "final": {
        "utterance": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many times , at minimum , can a course enrollment result show in different transcript ? Show me the course enrollment id .",
            "sql": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many times at most ?",
            "sql": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show other details of the transcript with least number of results .",
            "sql": "select t2 . other_details from transcript_contents as t1 join transcripts as t2 on t1 . transcript_id = t2 . transcript_id group by t1 . transcript_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "Show me the date and id of that transcript .",
            "sql": "select t2 . transcript_date , t1 . transcript_id from transcript_contents as t1 join transcripts as t2 on t1 . transcript_id = t2 . transcript_id group by t1 . transcript_id order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    "interaction": [
        {
            "utterance": "Find a semester when there was a Master student enrolled .",
            "sql": "select distinct t2 . semester_id from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id where degree_summary_name = value"
        },
        {
            "utterance": "How about a semester when there was a Bachelor student enrolled ?",
            "sql": "select distinct t2 . semester_id from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id where degree_summary_name = value"
        },
        {
            "utterance": "Find a semester that both types of students were enrolled in .",
            "sql": "select distinct t2 . semester_id from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id where degree_summary_name = value intersect select distinct t2 . semester_id from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id where degree_summary_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 0,
    "final": {
        "utterance": "What is maximum and minimum death toll caused each time?",
        "sql": "SELECT max(killed) ,  min(killed) FROM death"
    },
    "interaction": [
        {
            "utterance": "What are the death tolls each time ?",
            "sql": "select killed from death"
        },
        {
            "utterance": "What is the maximum number of deaths in any one time ?",
            "sql": "select max ( killed ) from death"
        },
        {
            "utterance": "What about the minimum ?",
            "sql": "select min ( killed ) from death"
        },
        {
            "utterance": "Give me the maximum and also the minimum .",
            "sql": "select max ( killed ) , min ( killed ) from death"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
    },
    "interaction": [
        {
            "utterance": "Show me information about deaths caused by ships .",
            "sql": "select * from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id"
        },
        {
            "utterance": "Only ships with tonnage 't ' .",
            "sql": "select * from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id where t2 . tonnage = value"
        },
        {
            "utterance": "Only return the death and injury information for those ships .",
            "sql": "select t1 . killed , t1 . injured from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id where t2 . tonnage = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the different ids and names of the battles that lost any 'Brig' type ships?",
        "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of the battles ?",
            "sql": "select id , name from battle"
        },
        {
            "utterance": "Only show those that ships were lost in .",
            "sql": "select distinct t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle"
        },
        {
            "utterance": "Please , just the ones with 'Brig ' ship type .",
            "sql": "select distinct t1 . id , t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . ship_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
    },
    "interaction": [
        {
            "utterance": "How many people were killed or injured in each battle ?",
            "sql": "select t1 . id , t1 . name , sum ( t3 . killed ) , sum ( t3 . injured ) from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle join death as t3 on t2 . id = t3 . caused_by_ship_id group by t1 . id"
        },
        {
            "utterance": "Only show the deaths for those battles that produced at least ten deaths .",
            "sql": "select t1 . id , t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle join death as t3 on t2 . id = t3 . caused_by_ship_id group by t1 . id having sum ( t3 . killed ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the ship id and name that caused most total injuries?",
        "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the injuries caused by each ship ( give ship id and name please ) .",
            "sql": "select t2 . id , t2 . name , sum ( t1 . injured ) from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id group by t2 . id"
        },
        {
            "utterance": "Sort it by decreasing number of injuries .",
            "sql": "select t2 . id , t2 . name , sum ( t1 . injured ) from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id group by t2 . id order by sum ( t1 . injured )"
        },
        {
            "utterance": "Only show the ship id and name that caused the most total injuries .",
            "sql": "select t2 . id , t2 . name from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id group by t2 . id order by sum ( t1 . injured ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    "interaction": [
        {
            "utterance": "Which battles did the bulgarian commander 'Kaloyan ' fight in ?",
            "sql": "select name from battle where bulgarian_commander = value"
        },
        {
            "utterance": "How about the latin commander 'Baldwin I ' ?",
            "sql": "select name from battle where latin_commander = value"
        },
        {
            "utterance": "Just the ones where they were fighting one another , please .",
            "sql": "select name from battle where bulgarian_commander = value and latin_commander = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 6,
    "final": {
        "utterance": "How many battles did not lose any ship with tonnage '225'?",
        "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
    },
    "interaction": [
        {
            "utterance": "Which battle ids lost ships with tonnage '225 ' ?",
            "sql": "select lost_in_battle from ship where tonnage = value"
        },
        {
            "utterance": "Give the names of these battles , too .",
            "sql": "select t2 . id , t2 . name from ship as t1 join battle as t2 on t1 . lost_in_battle = t2 . id where tonnage = value"
        },
        {
            "utterance": "Which battle ids and names did not lose any ship with tonnage '225 ' ?",
            "sql": "select id , name from battle where id not in ( select lost_in_battle from ship where tonnage = value )"
        },
        {
            "utterance": "How many is that ?",
            "sql": "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 7,
    "final": {
        "utterance": "List the name and date of the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
    },
    "interaction": [
        {
            "utterance": "List the name and date of the battle that has lost the ship named 'Lettice '",
            "sql": "select t1 . name , t1 . date from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . name = value"
        },
        {
            "utterance": "Same for 'HMS Atlanta ' , please .",
            "sql": "select t1 . name , t1 . date from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . name = value"
        },
        {
            "utterance": "Can you intersect those ?",
            "sql": "select t1 . name , t1 . date from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . name = value intersect select t1 . name , t1 . date from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 8,
    "final": {
        "utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
    },
    "interaction": [
        {
            "utterance": "Which battle ids and names lost ships in the 'English Channel ' ?",
            "sql": "select t1 . id , t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value"
        },
        {
            "utterance": "Which did not ?",
            "sql": "select t1 . id , t1 . name from battle as t1 except select t1 . id , t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value"
        },
        {
            "utterance": "For these ones , show their names , results , and bulgarian commanders .",
            "sql": "select name , result , bulgarian_commander from battle except select t1 . name , t1 . result , t1 . bulgarian_commander from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 0,
    "final": {
        "utterance": "Which cities do more than one employee under age 30 come from?",
        "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "find all employees who are under age 30 .",
            "sql": "select * from employee where age < value"
        },
        {
            "utterance": "Which cities did they come from ?",
            "sql": "select city from employee where age < value"
        },
        {
            "utterance": "show the cities from which more than one employee originated .",
            "sql": "select city from employee where age < value group by city having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the manager name and district of the shop whose number of products is the largest.",
        "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show all shops .",
            "sql": "select * from shop"
        },
        {
            "utterance": "what is the total number of products they are selling ?",
            "sql": "select sum ( number_products ) from shop"
        },
        {
            "utterance": "find the name of the shop with the greatest number of products .",
            "sql": "select name from shop order by number_products desc limit value"
        },
        {
            "utterance": "what are its manager name and district ?",
            "sql": "select manager_name , district from shop order by number_products desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 2,
    "final": {
        "utterance": "find the minimum and maximum number of products of all stores.",
        "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    "interaction": [
        {
            "utterance": "find the average number of products of all stores .",
            "sql": "select avg ( number_products ) from shop"
        },
        {
            "utterance": "how about the minimum and maximum ?",
            "sql": "select min ( number_products ) , max ( number_products ) from shop"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of stores whose number products is more than the average number of products.",
        "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    "interaction": [
        {
            "utterance": "show the name and number of product for all shops .",
            "sql": "select name , number_products from shop"
        },
        {
            "utterance": "what is the average number of products ?",
            "sql": "select avg ( number_products ) from shop"
        },
        {
            "utterance": "Find the names of stores whose number products is less than the average .",
            "sql": "select name from shop where number_products < ( select avg ( number_products ) from shop )"
        },
        {
            "utterance": "how about more than ?",
            "sql": "select name from shop where number_products > ( select avg ( number_products ) from shop )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 4,
    "final": {
        "utterance": "find the name of employee who was awarded the most times in the evaluation.",
        "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many evaluations are there ?",
            "sql": "select count ( * ) from evaluation"
        },
        {
            "utterance": "what years were they given ?",
            "sql": "select year_awarded from evaluation"
        },
        {
            "utterance": "find the name of the employee who received the most evaluation awards .",
            "sql": "select t1 . name from employee as t1 join evaluation as t2 on t1 . employee_id = t2 . employee_id group by t2 . employee_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the employee who got the highest one time bonus.",
        "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the name of the employees who received past evaluation awards .",
            "sql": "select t1 . name from employee as t1 join evaluation as t2 on t1 . employee_id = t2 . employee_id"
        },
        {
            "utterance": "who won the most times ?",
            "sql": "select t1 . name from employee as t1 join evaluation as t2 on t1 . employee_id = t2 . employee_id group by t2 . employee_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "ok , which one received the award with the highest bonus ?",
            "sql": "select t1 . name from employee as t1 join evaluation as t2 on t1 . employee_id = t2 . employee_id order by t2 . bonus desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of employees who never won any award in the evaluation.",
        "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    "interaction": [
        {
            "utterance": "find the number of different employees who were awarded in the past evaluations .",
            "sql": "select count ( distinct employee_id ) from evaluation"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select t1 . name from employee as t1 join evaluation as t2 on t1 . employee_id = t2 . employee_id"
        },
        {
            "utterance": "show the names of the employees who never won .",
            "sql": "select name from employee where employee_id not in ( select employee_id from evaluation )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the shop that is hiring the largest number of employees?",
        "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many shops are hiring ?",
            "sql": "select count ( distinct shop_id ) from hiring"
        },
        {
            "utterance": "what are the shops ' names ? '",
            "sql": "select t2 . name from hiring as t1 join shop as t2 on t1 . shop_id = t2 . shop_id"
        },
        {
            "utterance": "which one is hiring the largest number of employees ?",
            "sql": "select t2 . name from hiring as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the shops that do not hire any employee.",
        "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    "interaction": [
        {
            "utterance": "show all hiring info .",
            "sql": "select * from hiring"
        },
        {
            "utterance": "Find the names of any shops not hiring .",
            "sql": "select name from shop where shop_id not in ( select shop_id from hiring )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the number of employees hired in each shop; show the shop name as well.",
        "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    "interaction": [
        {
            "utterance": "how many employees are being hired in all shops ?",
            "sql": "select count ( * ) from hiring"
        },
        {
            "utterance": "show the number for each shop . show the shop name as well .",
            "sql": "select count ( * ) , t2 . name from hiring as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t2 . name"
        }
    ]
}
